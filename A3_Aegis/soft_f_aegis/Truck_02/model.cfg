class CfgSkeletons
{
	class Default
    {
        isDiscrete = true;
        skeletonInherit = "";
        skeletonBones[] = {};
    };
	class Vehicle: Default{};
	class Car: Vehicle{};
	class ZamakSkeleton_Aegis: Car
	{
		isDiscrete = true;
		skeletonInherit = Car;
		skeletonBones[] = 
		{
			drivewheel,"",
			volant,drivewheel,

			wheel_1_1_damper_land,"",
			wheel_1_1_damper,wheel_1_1_damper_land,
			wheel_1_1_steering,wheel_1_1_damper,
			wheel_1_1,wheel_1_1_steering,
			wheel_1_1_unhide,wheel_1_1,
			wheel_1_1_hide,wheel_1_1,
			wheel_1_2_damper_land,"",
			wheel_1_2_damper,wheel_1_2_damper_land,
			wheel_1_2_steering,wheel_1_2_damper,
			wheel_1_2,wheel_1_2_steering,
			wheel_1_2_unhide,wheel_1_2,
			wheel_1_2_hide,wheel_1_2,
			wheel_1_3_damper_land,"",
			wheel_1_3_damper,wheel_1_3_damper_land,
			wheel_1_3_steering,wheel_1_3_damper,
			wheel_1_3,wheel_1_3_steering,
			wheel_1_3_unhide,wheel_1_3,
			wheel_1_3_hide,wheel_1_3,
			wheel_1_4_damper_land,"",
			wheel_1_4_damper,wheel_1_4_damper_land,
			wheel_1_4_steering,wheel_1_4_damper,
			wheel_1_4,wheel_1_4_steering,
			wheel_1_4_unhide,wheel_1_4,
			wheel_1_4_hide,wheel_1_4,
			wheel_2_1_damper_land,"",
			wheel_2_1_damper,wheel_2_1_damper_land,
			wheel_2_1_steering,wheel_2_1_damper,
			wheel_2_1,wheel_2_1_steering,
			wheel_2_1_unhide,wheel_2_1,
			wheel_2_1_hide,wheel_2_1,
			wheel_2_2_damper_land,"",
			wheel_2_2_damper,wheel_2_2_damper_land,
			wheel_2_2_steering,wheel_2_2_damper,
			wheel_2_2,wheel_2_2_steering,
			wheel_2_2_unhide,wheel_2_2,
			wheel_2_2_hide,wheel_2_2,
			wheel_2_3_damper_land,"",
			wheel_2_3_damper,wheel_2_3_damper_land,
			wheel_2_3_steering,wheel_2_3_damper,
			wheel_2_3,wheel_2_3_steering,
			wheel_2_3_unhide,wheel_2_3,
			wheel_2_3_hide,wheel_2_3,
			wheel_2_4_damper_land,"",
			wheel_2_4_damper,wheel_2_4_damper_land,
			wheel_2_4_steering,wheel_2_4_damper,
			wheel_2_4,wheel_2_4_steering,
			wheel_2_4_unhide,wheel_2_4,
			wheel_2_4_hide,wheel_2_4,

			otocVez,"",
			otocHlaven,otocVez,

			damageHide,"",
			damageHlaven,otocHlaven,
			damageVez,otocVez,
			spz,damageHide,
			DoorL,damageHide,
			glass3,DoorL,
			DoorR,damageHide,
			glass4,DoorR,
			glass1,damageHide,
			glass2,damageHide,
			glass5,damageHide,
			glass6,damageHide,
			rear_damageHide,damageHide,
			reverse_light,damageHide,
			daylights,damageHide,

			ukaz_rychlo,"",
			ukaz_rychlo2,"",
			ukaz_rpm,"",
			mph,"",
			rpm,"",
			fuel,"",
			fuel_1,"",
			fuel_01,"",
			fuel_2,"",
			fuel_3,"",
			prop_01,"",
			prop_02,"",
			prop_2,"",
			prop_1,"",
			pedal_brake,"",
			pedal_thrust,"",
			Ventilate,"",
			speed,"",
			oil,"",

			rear_hide,""
		};
	};
};
class CfgModels
{
	class Default
	{
        sectionsInherit = "";
        sections[] = {};
        skeletonName = "";
	};
	class Vehicle: Default
	{
		sectionsInherit = Default;
		skeletonName = Vehicle;
	};
	class Car: Vehicle
	{
		sectionsInherit = Vehicle;
		skeletonName = Car;
	};
	class Truck_02_base_F: Car
	{
        sectionsInherit = Car;
		sections[] = 
		{
			"brzdove svetlo",
			"zadni svetlo",
			Light_R,
			Light_L,
			clan,
			clan_sign,
			glass1,
			zbytek,
			glass2,
			glass3,
			glass4,
			camo1,
			camo2,
			camo3,
            camo4,
			glass5,
			glass6,
			spz,
			camo4,
			Light_R_flare,
			Light_L_flare,
			motor
		};
		skeletonName =  ZamakSkeleton_Aegis;
		class Animations
		{
			#define DamageOffset 0.2
            class damageHideVez
            {
                type = hide;
                source = damage;
                selection = otocVez;
                minValue = 0;
                maxValue = 1;
                hideValue = 1;
                unHideValue = -1;
            };
            class damageHideHlaven: damageHideVez
            {
                selection = otocHlaven;
            };
			class Wheel_1_1_destruct
			{
				type = hide;
				selection = wheel_1_1_hide;
				source = HitLFWheel;
				minValue = 0;
				maxValue = 1;
				hideValue = 0.99;
                unHideValue = -1;
			};
			class Wheel_1_2_destruct: Wheel_1_1_destruct
			{
				source = HitLBWheel;
				selection = wheel_1_2_hide;
			};
			class Wheel_1_3_destruct: Wheel_1_1_destruct
			{
				source = HitLMWheel;
				selection = wheel_1_3_hide;
			};
			class Wheel_1_4_destruct: Wheel_1_1_destruct
			{
				source = HitLF2Wheel;
				selection = wheel_1_4_hide;
			};
			class Wheel_2_1_destruct: Wheel_1_1_destruct
			{
				source = HitRFWheel;
				selection = wheel_2_1_hide;
			};
			class Wheel_2_2_destruct: Wheel_1_1_destruct
			{
				source = HitRBWheel;
				selection = wheel_2_2_hide;
			};
			class Wheel_2_3_destruct: Wheel_1_1_destruct
			{
				source = HitRMWheel;
				selection = wheel_2_3_hide;
			};
			class Wheel_2_4_destruct: Wheel_1_1_destruct
			{
				source = HitRF2Wheel;
				selection = wheel_2_4_hide;
			};
			class Wheel_1_1_destruct_unhide
			{
				type = hide;
				source = HitLFWheel;
				selection = wheel_1_1_unhide;
				sourceAddress = mirror;
				minValue = -1;
				maxValue = 0;
				hideValue = 0.01;
                unHideValue = -1;
			};
			class Wheel_1_2_destruct_unhide: Wheel_1_1_destruct_unhide
			{
				source = HitLBWheel;
				selection = wheel_1_2_unhide;
			};
			class Wheel_1_3_destruct_unhide: Wheel_1_1_destruct_unhide
			{
				source = HitLMWheel;
				selection = wheel_1_3_unhide;
			};
			class Wheel_1_4_destruct_unhide: Wheel_1_1_destruct_unhide
			{
				source = HitLF2Wheel;
				selection = wheel_1_4_unhide;
			};
			class Wheel_2_1_destruct_unhide: Wheel_1_1_destruct_unhide
			{
				source = HitRFWheel;
				selection = wheel_2_1_unhide;
			};
			class Wheel_2_2_destruct_unhide: Wheel_1_1_destruct_unhide
			{
				source = HitRBWheel;
				selection = wheel_2_2_unhide;
			};
			class Wheel_2_3_destruct_unhide: Wheel_1_1_destruct_unhide
			{
				source = HitRMWheel;
				selection = wheel_2_3_unhide;
			};
			class Wheel_2_4_destruct_unhide: Wheel_1_1_destruct_unhide
			{
				source = HitRF2Wheel;
				selection = wheel_2_4_unhide;
			};
            class wheel_1_4_damage: Wheel_1_4_destruct
            {
				type = translation;
				axis = Basic_Damper_Destruct_Axis;
				selection = wheel_1_4_damper;
				minValue = 0;
				maxValue = 1;
				offset0 = 0;
				offset1 = DamageOffset;
            };
            class wheel_2_4_damage: Wheel_2_4_destruct
            {
				type = translation;
				axis = Basic_Damper_Destruct_Axis;
				selection = wheel_2_4_damper;
				minValue = 0;
				maxValue = 1;
				offset0 = 0;
				offset1 = DamageOffset;
            };
			class Wheel_1_4_Damper_Damage_BackAnim: Wheel_1_4_Damage
			{
				offset1 = -DamageOffset;
				selection = wheel_1_4_damper;
			};
			class Wheel_2_4_Damper_Damage_BackAnim: Wheel_2_4_Damage
			{
				offset1 = -DamageOffset;
				selection = wheel_2_4_damper;
			};
			class glass1_destruct
			{
				type = hide;
				source = HitGlass1;
				selection = glass1;
				minValue = 0;
				maxValue = 1;
				hideValue = 0.99999;
                unHideValue = -1;
			};
			class glass2_destruct: glass1_destruct
			{
				source = HitGlass2;
				selection = glass2;
			};
			class glass3_destruct: glass1_destruct
			{
				source = HitGlass3;
				selection = glass3;
			};
			class glass4_destruct: glass1_destruct
			{
				source = HitGlass4;
				selection = glass4;
			};
			class glass5_destruct: glass1_destruct
			{
				source = HitGlass5;
				selection = glass5;
			};
			class glass6_destruct: glass1_destruct
			{
				source = HitGlass6;
				selection = glass6;
			};
			class Wheel_1_1
			{
				type = rotationX;
				source = wheel;
				selection = wheel_1_1;
				axis = wheel_1_1_axis;
				sourceAddress = loop;
				minValue = 0;
				maxValue = 1;
				angle0 = (rad 0);
				angle1 = (rad -360);
			};
			class Wheel_2_1: Wheel_1_1
			{
				selection = wheel_2_1;
				axis = wheel_2_1_axis;
			};
			class Wheel_1_2: Wheel_1_1
			{
				selection = wheel_1_2;
				axis = wheel_1_2_axis;
			};
			class Wheel_2_2: Wheel_1_1
			{
				selection = wheel_2_2;
				axis = wheel_2_2_axis;
			};
			class daylights
			{
				type = hide;
				source = rpm;
				selection = daylights;
				minValue = -0.8;
				maxValue = 0.2;
				hideValue = 0.2;
				unHideValue = 1;
			};
			class reverse_light
			{
				type = hide;
				source = gear;
				selection = reverse_light;
				minValue = -1;
				maxValue = 0;
				hideValue = 0.2;
                unHideValue = -1;
			};
            class pedal_thrust
            {
                type = rotation;
                source = throttle;
                selection = pedal_thrust;
                axis = pedal_thrust_axis;
                minValue = 0;
                maxValue = 1;
                angle0 = 0;
                angle1 = -0.5235988;
            };
            class pedal_brake: pedal_thrust
            {
                source = brake;
                selection = pedal_brake;
                axis = pedal_brake_axis;
                minValue = 0;
                maxValue = 0.5;
            };
			class Wheel_1_1_Damage: Wheel_1_1_destruct
			{
				type = translation;
				axis = Basic_Damper_Destruct_Axis;
				selection = wheel_1_1_damper;
				minValue = 0;
				maxValue = 1;
				offset0 = 0;
				offset1 = DamageOffset;
			};
			class Wheel_1_2_Damage: Wheel_1_2_destruct
			{
				type = translation;
				axis = Basic_Damper_Destruct_Axis;
				selection = wheel_1_2_damper;
				minValue = 0;
				maxValue = 1;
				offset0 = 0;
				offset1 = DamageOffset;
			};
			class Wheel_1_3_Damage: Wheel_1_3_destruct
			{
				type = translation;
				axis = Basic_Damper_Destruct_Axis;
				selection = wheel_1_3_damper;
				minValue = 0;
				maxValue = 1;
				offset0 = 0;
				offset1 = DamageOffset;
			};
			class Wheel_2_1_Damage: Wheel_2_1_destruct
			{
				type = translation;
				axis = Basic_Damper_Destruct_Axis;
				selection = wheel_2_1_damper;
				minValue = 0;
				maxValue = 1;
				offset0 = 0;
				offset1 = DamageOffset;
			};
			class Wheel_2_2_Damage: Wheel_2_2_destruct
			{
				type = translation;
				axis = Basic_Damper_Destruct_Axis;
				selection = wheel_2_2_damper;
				minValue = 0;
				maxValue = 1;
				offset0 = 0;
				offset1 = DamageOffset;
			};
			class Wheel_2_3_Damage: Wheel_2_3_destruct
			{
				type = translation;
				axis = Basic_Damper_Destruct_Axis;
				selection = wheel_2_3_damper;
				minValue = 0;
				maxValue = 1;
				offset0 = 0;
				offset1 = DamageOffset;
			};
			class Wheel_1_1_Damper_Damage_BackAnim: Wheel_1_1_Damage
			{
				offset1 = -DamageOffset;
				selection = wheel_1_1_damper;
			};
			class Wheel_1_2_Damper_Damage_BackAnim: Wheel_1_2_Damage
			{
				offset1 = -DamageOffset;
				selection = wheel_1_2_damper;
			};
			class Wheel_1_3_Damper_Damage_BackAnim: Wheel_1_3_Damage
			{
				offset1 = -DamageOffset;
				selection = wheel_1_3_damper;
			};
			class Wheel_2_1_Damper_Damage_BackAnim: Wheel_2_1_Damage
			{
				offset1 = -DamageOffset;
				selection = wheel_2_1_damper;
			};
			class Wheel_2_2_Damper_Damage_BackAnim: Wheel_2_2_Damage
			{
				offset1 = -DamageOffset;
				selection = wheel_2_2_damper;
			};
			class Wheel_2_3_Damper_Damage_BackAnim: Wheel_2_3_Damage
			{
				offset1 = -DamageOffset;
				selection = wheel_2_3_damper;
			};
			class Wheel_1_3: Wheel_1_1
			{
				selection = wheel_1_3;
				axis = wheel_1_3_axis;
			};
			class Wheel_2_3: Wheel_1_1
			{
				selection = wheel_2_3;
				axis = wheel_2_3_axis;
			};
			class Wheel_1_1_Damper
			{
				type = translation;
				source = damper;
				selection = wheel_1_1_damper_land;
				axis = basic_damper_destruct_axis;
				minValue = 0;
				maxValue = 1;
				offset0 = -0.2175;
				offset1 = 0.10875;
			};
			class Wheel_2_1_Damper: Wheel_1_1_Damper
			{
				selection = wheel_2_1_damper_land;
			};
			class Wheel_1_2_Damper: Wheel_1_1_Damper
			{
				selection = wheel_1_2_damper_land;
			};
			class Wheel_2_2_Damper: Wheel_1_1_Damper
			{
				selection = wheel_2_2_damper_land;
			};
			class Wheel_1_3_Damper: Wheel_1_1_Damper
			{
				selection = wheel_1_3_damper_land;
			};
			class Wheel_2_3_Damper: Wheel_1_1_Damper
			{
				selection = wheel_2_3_damper_land;
			};
			class damageHide
			{
				type = hide;
				source = damage;
				selection = damageHide;
				hideValue = 1;
                unHideValue = -1;
			};
            class rear_damageHide: damageHide
            {
                selection = rear_damagehide;
            };
            class spz_hide: damageHide
            {
                source = spz_hide;
                selection = spz;
            };
            class rear_hide: damageHide
            {
                source = rear_hide;
                selection = rear_hide;
            };
			class IndicatorSpeed
			{
				type = rotation;
				source = speed;
				selection = speed;
				axis = speed_axis;
				minValue = 0;
				maxValue = 30;
				angle0 = 0;
				angle1 = 4.5;
			};
			class IndicatorRPM
			{
				type = rotation;
				source = rpm;
				selection = rpm;
				axis = rpm_axis;
				minValue = 0;
				maxValue = 3000;
				angle0 = 0;
				angle1 = 3.8;
			};
			class Ventilate: IndicatorRPM
			{
				selection = Ventilate;
				axis = Ventilate_axis;
				sourceAddress = loop;
				angle0 = (rad 0);
				angle1 = 2*(rad 360);
			};
			class IndicatorOilTemp: IndicatorRPM
			{
				source = speed;
				selection = oil;
				axis = oil_axis;
				minValue = 0;
				maxValue = 30;
				angle0 = 0;
				angle1 = 1.5;
			};
			class Fuel: IndicatorRPM
			{
				source = fuel;
				selection = fuel;
				axis = fuel_axis;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = 2.2;
			};
			class DrivingWheel
			{
				type = rotation;
				source = drivingWheel;
				selection = drivewheel;
				axis = drivewheel_axis;
				minValue = -1;
				maxValue = 1;
				angle0 = (rad -80);
				angle1 = (rad 80);
			};
			class Steering_1_1
			{
				type = rotationY;
				source = drivingWheel;
				selection = wheel_1_1_steering;
				axis = wheel_1_1_steering_axis;
				memory = true;
				minValue = -1;
				maxValue = 1;
				angle0 = (rad 30);
				angle1 = (rad -30);
			};
			class Steering_2_1: Steering_1_1
			{
				selection = wheel_2_1_steering;
				axis = wheel_2_1_steering_axis;
				angle0 = (rad 30);
				angle1 = (rad -30);
			};
			class Door_LF
			{
				type = rotation;
				source = Door_LF;
				selection = DoorL;
				axis = DoorL_axis;
				angle0 = (rad 0);
				angle1 = (rad 80);
				minValue = 0;
				maxValue = 1;
			};
			class Door_RF: Door_LF
			{
				source = Door_RF;
				selection = DoorR;
				axis = DoorR_axis;
				angle0 = (rad 0);
				angle1 = (rad -80);
			};
		};
	};
	class Truck_02_cargo_F: Truck_02_base_F{};
	class Truck_02_flatbed_F: Truck_02_base_F{};
};
