class Rotation
{
	type = rotation;
	memory = true;
	minValue = 0;
	maxValue = 1;
	angle0 = 0;
	angle1 = 1;
};
class CfgSkeletons
{
	class Default
    {
        isDiscrete = true;
        skeletonInherit = "";
        skeletonBones[] = {};
    };
	class Plane_Transport_01_F_skeleton: Default
	{
		isDiscrete = false;
        skeletonInherit = Default;
		skeletonBones[] =
		{
			kompas,"",
			kompas2,"",
			kompas3,"",
			horizont,"",
			horizont2,"",
			Control_wheel_1,"",
			Control_wheel_2,"",
			Pedals_left_1,"",
			Pedals_left_2,"",
			Pedals_right_1,"",
			Pedals_right_2,"",
			Throttle_stick,"",
			ind_engine,"",
			ind_gear,"",
			ind_rudder,"",
			ind_flaps,"",
			ind_ail_left,"",
			ind_ail_right,"",
			ind_elevator,"",
			display_off,"",
			gear_handle,"",

			flap_1_1,"",
			flap_1_2,"",
			flap_1_3,"",
			flap_1_4,"",
			elevator_l,"",
			elevator_r,"",
			aileron_1_1,"",
			aileron_1_2,"",
			rudder,"",

			engine_1_prop,"",
			engine_2_prop,"",
			engine_3_prop,"",
			engine_4_prop,"",

			gear_1_1,"",
			gear_1_1_stabil2,gear_1_1,
			gear_1_1_steering,gear_1_1,
			gear_1_1_damper,gear_1_1_steering,
			gear_1_1_stabil,gear_1_1_damper,
			wheel_1_1,gear_1_1_damper,

			gear_2_1,"",
			gear_2_1_damper,gear_2_1,
			wheel_2_1,gear_2_1_damper,
			wheel_3_1,gear_2_1_damper,

			gear_2_2,"",
			gear_2_2_damper,gear_2_2,
			wheel_2_2,gear_2_2_damper,
			wheel_3_2,gear_2_2_damper,

			hatch_1_1_f,"",
			hatch_1_1_b_joint,"",
			hatch_1_1_b,hatch_1_1_b_joint,
			hatch_2_1_t,"",
			hatch_2_1_t_damageHide,hatch_2_1_t,
			hatch_2_1_b,"",
			hatch_2_2_t,"",
			hatch_2_2_t_damageHide,hatch_2_2_t,
			hatch_2_2_b,"",

			ramp_bottom,"",
			ramp_top,"",
			door_1,"",
			door_2_1,"",
			door_2_2,"",
			door_2_1_damageHide,door_2_1,
			door_2_2_damageHide,door_2_2,

			Cargoseats,""
		};
	};
};
class CfgModels
{
	class Default
    {
        sectionsInherit = "";
        sections[] = {};
        skeletonName = "";
    };
	class Plane_Transport_01_F: Default
	{
		skeletonName = Plane_Transport_01_F_skeleton;
		sections[] =
		{
			zbytek,
			"podsvit pristroju",
			clan,
			trup,
			motor,
			palivo,
			"L svetlo",
			"P svetlo",
			"L2 svetlo",
			"P2 svetlo",
			"sklo predni L",
			"vrtule staticka",
			"vrtule blur",
			camo1,
			camo2,
			camo3
		};
        sectionsInherit = Default;
		class Animations
		{
			class ControlWheel1//: Rotation
			{
				type = rotation;
				source = aileron;
				selection = Control_wheel_1;
				axis = Control_wheel_1_axis;
				minValue = -1;
				maxValue = 1;
				angle0 = (rad 50);
				angle1 = (rad -50);
			};
			class ControlWheel2: ControlWheel1
			{
				selection = Control_wheel_2;
				axis = Control_wheel_2_axis;
			};
			class ThrottleStick//: Rotation
			{
				type = rotation;
				source = throttle;
				selection = Throttle_stick;
				axis = Throttle_stick_axis;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad -60);
			};
			class IndicatorAltBaro//: Rotation
			{
				type = rotation;
				source = altBaro;
				sourceAddress = loop;
				selection = alt;
				axis = osa_alt;
				memory = false;
				maxValue = 304;
				angle0 = (rad 0);
				angle1 = (rad 360);
			};
			class IndicatorCompass//: Rotation
			{
				type = rotationZ;
				source = direction;
				selection = kompas;
				axis = osa_kompas;
				memory = false;
				minValue = -3.141593;
				maxValue = 3.141593;
				angle0 = (rad 0);
				angle1 = (rad 360);
			};
			class IndicatorCompass2: IndicatorCompass
			{
				selection = kompas2;
				axis = osa_kompas2;
			};
			class IndicatorCompass3: IndicatorCompass
			{
				selection = kompas3;
				axis = osa_kompas3;
			};
			class HorizonDive
			{
				type = rotationX;
				source = horizonDive;
				selection = horizont;
				axis = osa_horizont;
				memory = false;
				minValue = (rad -90);
				maxValue = (rad 90);
				angle0 = -1.570796;
				angle1 = 1.570796;
			};
			class HorizonBank
			{
				type = rotationZ;
				source = horizonBank;
				selection = horizont;
				axis = osa_horizont;
				memory = false;
				minValue = (rad -360);
				maxValue = (rad 360);
				angle0 = (rad -360);
				angle1 = (rad 360);
			};
			class Horizon2Bank: HorizonBank
			{
				selection = horizont2;
				axis = osa_horizont2;
			};
			class ind_flap//: Rotation
			{
				type = rotation;
				source = flap;
				selection = ind_flaps;
				axis = osa_ind_flaps;
				angle0 = (rad 0);
				angle1 = (rad 180);
				memory = false;
				minValue = 0;
				maxValue = 1;
			};
			class ind_ail_left//: Rotation
			{
				type = rotation;
				source = aileron;
				selection = ind_ail_left;
				axis = osa_ind_ail_left;
				minValue = -0.5;
				maxValue = 0.5;
				memory = false;
				angle0 = (rad -60);
				angle1 = (rad 60);
			};
			class ind_ail_right: ind_ail_left
			{
				selection = ind_ail_right;
			};
			class ind_elevator//: Rotation
			{
				type = rotation;
				source = elevator;
				selection = ind_elevator;
				axis = osa_ind_elevator;
				memory = false;
				minValue = -1;
				maxValue = 0.3;
				angle0 = (rad 90);
				angle1 = (rad -30);
			};
			class ind_rudder//: Rotation
			{
				type = rotation;
				source = rudder;
				selection = ind_rudder;
				axis = osa_ind_rudder;
				memory = false;
				minValue = -1;
				maxValue = 1;
				angle0 = (rad -90);
				angle1 = (rad 90);
			};
			class display_on
			{
				type = hide;
				source = rpm;
				selection = display_off;
				minValue = -0.5;
				maxValue = 0.5;
				hidevalue = 0.9;
				sourceAddress = clamp;
			};
			class ind_engine: display_on
			{
				selection = ind_engine;
				minValue = -0.5;
				maxValue = 0.5;
				hidevalue = 0.5;
				sourceAddress = loop;
			};
			class Gear_switch
			{
				type = rotation;
				source = gear;
				selection = gear_handle;
				axis = osa_gear_handle;
				memory = false;
				minValue = 0.5;
				maxValue = 1;
				angle0 = 0;
				angle1 = -0.6;
			};
			class ind_gear
			{
				type = hide;
				source = gear;
				selection = ind_gear;
				minValue = 0;
				maxValue = 0.2;
				hideValue = 0.19;
				sourceAddress = mirror;
			};
			class Flap_1_1//: Rotation
			{
				type = rotation;
				source = flap;
				selection = flap_1_1;
				axis = flap_1_1_axis;
				angle0 = (rad 0);
				angle1 = (rad -50);
				minValue = 0;
				maxValue = 1;
			};
			class Flap_1_2: Flap_1_1
			{
				selection = flap_1_2;
				axis = flap_1_2_axis;
				angle1 = (rad 50);
			};
			class Flap_1_3: Flap_1_1
			{
				source = flap;
				selection = flap_1_3;
				axis = flap_1_3_axis;
			};
			class Flap_1_4: Flap_1_2
			{
				selection = flap_1_4;
				axis = flap_1_4_axis;
			};
			class Flap_1_1T
			{
				type = translation;
				source = flap;
				selection = flap_1_1;
				axis = flap_1_1_axis2;
				memory = true;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = 1;
				offset0 = 0;
				offset1 = 1;
			};
			class Flap_1_2T: Flap_1_1T
			{
				selection = flap_1_2;
				axis = flap_1_2_axis2;
			};
			class Flap_1_3T: Flap_1_1T
			{
				selection = flap_1_3;
				axis = flap_1_3_axis2;
			};
			class Flap_1_4T: Flap_1_1T
			{
				selection = flap_1_4;
				axis = flap_1_4_axis2;
			};
			class ElevatorL//: Rotation
			{
				type = rotation;
				source = elevatorLeftCenterDamaged;
				selection = elevator_l;
				axis = elevator_l_axis;
				minValue = -1;
				maxValue = 1;
				angle0 = (rad 30);
				angle1 = (rad -30);
			};
			class ElevatorR: ElevatorL
			{
				source = elevatorRightDamaged;
				selection = elevator_r;
			};
			class AileronL//: Rotation
			{
				type = rotation;
				source = aileronLeftDamaged;
				selection = aileron_1_1;
				axis = aileron_1_1_axis;
				minValue = -0.5;
				maxValue = 0.5;
				angle0 = (rad -30);
				angle1 = (rad 30);
			};
			class AileronR: AileronL
			{
				source = aileronRightDamaged;
				selection = aileron_1_2;
				axis = aileron_1_2_axis;
			};
			class Rudder//: Rotation
			{
				type = rotation;
				source = rudderLeftCenterDamaged;
				selection = rudder;
				axis = rudder_axis;
				minValue = -1;
				maxValue = 1;
				angle0 = (rad -35);
				angle1 = (rad 35);
			};
			class Prop_1//: Rotation
			{
				type = rotation;
				source = rotor;
				selection = engine_1_prop;
				axis = engine_1_prop_axis;
				angle0 = (rad 0);
				angle1 = (rad 360);
			};
			class Prop_2: Prop_1
			{
				selection = engine_2_prop;
				axis = engine_2_prop_axis;
			};
			class Prop_3: Prop_1
			{
				selection = engine_3_prop;
				axis = engine_3_prop_axis;
				angle1 = (rad -360);
			};
			class Prop_4: Prop_1
			{
				selection = engine_4_prop;
				axis = engine_4_prop_axis;
				angle1 = (rad -360);
			};
			class Hatch_1_1FOpen//: Rotation
			{
				type = rotation;
				source = gear;
				selection = Hatch_1_1_F;
				axis = Hatch_1_1_F_axis;
				maxValue = 0.25;
				angle0 = (rad 0);
				angle1 = (rad 60);
			};
			class Hatch_1_1FClose: Hatch_1_1FOpen
			{
				minValue = 0.75;
				maxValue = 1;
				angle1 = (rad -60);
			};
			class Hatch_1_1BJoint//: Rotation
			{
				type = rotation;
				source = gear;
				selection = Hatch_1_1_B_Joint;
				axis = Hatch_1_1_B_Joint_axis;
				minValue = 0.15;
				angle0 = (rad 170);
				angle1 = 0;
			};
			class Hatch_1_1B: Hatch_1_1BJoint
			{
				selection = Hatch_1_1_B;
				axis = Hatch_1_1_B_axis;
				angle0 = (rad 165);
			};
			class Gear_1_1//: Rotation
			{
				type = rotation;
				source = gear;
				selection = gear_1_1;
				axis = gear_1_1_axis;
				minValue = 0.1;
				maxValue = 0.9;
				angle0 = (rad 0);
				angle1 = (rad -100);
			};
			class Gear_1_1_Steering
			{
				type = rotationY;
				source = rudder;
				selection = gear_1_1_steering;
				axis = gear_1_1_damper_axis;
				memory = true;
				minValue = -9;
				maxValue = 9;
				angle0 = (rad -60);
				angle1 = (rad 60);
			};
			class Gear_1_1_Damper
			{
				type = translation;
				source = Damper_1_1_source;
				selection = gear_1_1_damper;
				axis = gear_1_1_damper_axis;
				sourceAddress = clamp;
				minValue = 0;
				maxValue = 1;
				offset0 = -0.9;
				offset1 = 0;
			};
			class Gear_1_1_Stabil//: Rotation
			{
				type = rotation;
				source = altRadar;
				selection = gear_1_1_stabil;
				axis = gear_1_1_stabil_axis;
				minValue = 2.7;
				maxValue = 2.8;
				angle0 = (rad -20);
				angle1 = 0;
			};
			class Hatch_2_1_T//: Rotation
			{
				type = rotation;
				source = gear;
				selection = Hatch_2_1_T;
				axis = Hatch_2_1_T_axis;
				minValue = 0.7;
				angle0 = -0.628319;
				angle1 = 0;
			};
			class Hatch_2_1_B: Hatch_2_1_T
			{
				selection = Hatch_2_1_B;
				axis = Hatch_2_1_B_axis;
				angle0 = (rad -90);
			};
			class Hatch_2_2_T: Hatch_2_1_T
			{
				selection = Hatch_2_2_T;
				axis = Hatch_2_2_T_axis;
				angle0 = 0.628319;
			};
			class Hatch_2_2_B: Hatch_2_1_T
			{
				selection = Hatch_2_2_B;
				axis = Hatch_2_2_B_axis;
				angle0 = (rad 90);
			};
			class Gear_2_1
			{
				angle0 = 0;
				angle1 = 1;
				type = translation;
				source = gear;
				selection = gear_2_1;
				axis = gear_2_1_axis;
				memory = true;
				minValue = 0;
				maxValue = 1;
				offset0 = 0;
				offset1 = 1.14;
			};
			class Gear_2_2: Gear_2_1
			{
				selection = gear_2_2;
			};
			class Gear_2_1_Damper: Gear_2_1
			{
				source = Damper_2_1_source;
				selection = gear_2_1_damper;
				sourceAddress = clamp;
				minValue = 0;
				maxValue = 1;
				offset0 = -0.15;
				offset1 = 0;
			};
			class Gear_2_2_Damper: Gear_2_1_Damper
			{
				source = Damper_2_2_source;
				selection = gear_2_2_damper;
			};
			class wheel//: Rotation
			{
				type = rotationX;
				sourceAddress = loop;
				source = wheel;
				selection = "";
				axis = "";
				memory = true;
				angle0 = 0;
				angle1 = -6.283185;
			};
			class wheel_1_1: wheel
			{
				selection = wheel_1_1;
				axis = wheel_1_1_axis;
			};
			class wheel_2_1: wheel
			{
				selection = wheel_2_1;
				axis = wheel_2_1_axis;
			};
			class wheel_2_2: wheel
			{
				selection = wheel_2_2;
				axis = wheel_2_2_axis;
			};
			class wheel_3_1: wheel
			{
				selection = wheel_3_1;
				axis = wheel_3_1_axis;
			};
			class wheel_3_2: wheel
			{
				selection = wheel_3_2;
				axis = wheel_3_2_axis;
			};
			class ramp_bottom//: Rotation
			{
				type = rotation;
				source = Door_1_source;
				selection = ramp_bottom;
				axis = ramp_bottom_axis;
				angle0 = -0.401426;
				angle1 = 0.174533;
				minValue = 0;
				maxValue = 1;
			};
			class ramp_top: ramp_bottom
			{
				source = Door_1_source;
				selection = ramp_top;
				axis = ramp_top_axis;
				angle0 = 0.401426;
				angle1 = 0;
			};
			class door_1//: Rotation
			{
				type = rotation;
				source = door;
				selection = door_1;
				axis = door_1_axis;
				angle0 = -1.658063;
				angle1 = 0;
				minValue = 0;
				maxValue = 1;
			};
			class door_2_1: door_1
			{
				source = door;
				selection = door_2_1;
				axis = door_2_1_axis;
				angle0 = 0;
				angle1 = 0.959931;
			};
			class door_2_2: door_1
			{
				source = door;
				selection = door_2_2;
				axis = door_2_2_axis;
				minValue = 0;
				angle0 = 0;
				angle1 = -0.959931;
			};
			class hatch_2_2_t_damageHide
			{
				type = hide;
				source = damage;
				selection = hatch_2_2_t_damageHide;
			};
			class hatch_2_1_t_damageHide: hatch_2_2_t_damageHide
			{
				selection = hatch_2_1_t_damageHide;
			};
			class door_2_1_damageHide: hatch_2_2_t_damageHide
			{
				selection = door_2_1_damageHide;
			};
			class door_2_2_damageHide: hatch_2_2_t_damageHide
			{
				selection = door_2_2_damageHide;
			};
			class Avionics_damage
			{
				type = hide;
				source = HitAvionics;
				selection = Display_off_dmg;
				minValue = 0;
				maxValue = 1;
				hideValue = 0;
				unHideValue = 0.9;
			};
			class Cargoseats_Hide
			{
				type = hide;
				source = Hide_Cargoseats_source;
				selection = Cargoseats;
				minValue = 0;
				maxValue = 1;
				hideValue = 0.5;
				unHideValue = -1;
			};
		};
	};
};
