class CfgSkeletons
{
	class Default
	{
		isDiscrete = true;
		skeletonInherit = "";
		skeletonBones[] = {};
	};
	class Vehicle: Default{};
	class Helicopter: Vehicle
	{
		isDiscrete = true;
		skeletonInherit = Vehicle;
		skeletonBones[] =
		{
			"velka vrtule","",
			"mala vrtule","",
			"main rotor","velka vrtule",
			"tail rotor","mala vrtule",
			"main rotor static","main rotor",
			"tail rotor static","tail rotor",

			OtocVez,"",
			OtocHlaven,OtocVez,

			damageHide,"",
			glass1,damageHide,
			glass2,damageHide,
			glass3,damageHide,
			glass4,damageHide,
			glass5,damageHide,
			glass6,damageHide,
			glass7,damageHide,

			alt,"",
			alt2,"",
			nm_alt,"",
			nm_alt2,"",
			mph,"",
			mph2,"",
			vert_speed,"",
			vert_speed2,"",
			rpm,"",
			rpm2,"",
			horizont,"",
			horizont2,"",
			compass,"",
			compass2,"",
			hodinova,"",
			hodinova2,"",
			minutova,"",
			minutova2,""
		};
	};
    class Heli_Attack_03_F_skeleton: Helicopter
    {
		isDiscrete = true;
        skeletonInherit = Helicopter;
        skeletonBones[] =
        {
            main_trav,"",
            main_elev,main_trav,
            tads_trav,"",
            tads_elev,tads_trav,
            pnvs_trav,"",
            zasleh,main_elev,

            damper_left,"",
            damper_right,"",
            damper_rear,"",

            elevator,"",

			stick_pilot,"",
			lever_pilot,"",
	        display_off,"",
            ins_ai_1,"",
            ins_ai_2,"",
            ins_asi_1,"",
            ins_alt_1,"",
            ins_alt_2,"",
            ins_compass_1,"",
            dg_bank,"",
            dg_compas,"",
            dg_pitch,"",
            dg_rpm,"",
            dg_vertspeed,"",
			PositionLights,damageHide
        };
    };
};
class CfgModels
{
	class Default
	{
		sectionsInherit = "";
		sections[] = {};
		skeletonName = "";
	};
	class Vehicle: Default
    {
		sectionsInherit = Default;
		sections[] =
		{
			cislo,
			grupa,
			side,
			sektor,
			clan,
			clan_sign,
			"podsvit pristroju",
			poskozeni,
			Light_L,
			Light_R,
			zasleh
		};
		skeletonName = Vehicle;
    };
    class Helicopter: Vehicle
    {
		sectionsInherit = Vehicle;
        htMin = 60;		// Minimum half-cooling time (in seconds)
		htMax = 1800;	// Maximum half-cooling time (in seconds)
		afMax = 200;	// Maximum temperature in case the model is alive (in celsius)
		mfMax = 100;	// Maximum temperature when the model is moving (in celsius)
		mFact = 0;		// Metabolism factor - number from interval <0, 1> (0 - metabolism has no influence, 1 - metabolism has full influence (no other temperature source will be considered)).
		tBody = 0;	 	// Metabolism temperature of the model (in celsius)
		sections[] =
        {
			"sklo predni p",
			"sklo predni l",
			"main rotor blur",
			"main rotor static",
			"tail rotor blur",
			"tail rotor static",
			motor,
			elektronika,
			munice,
			zbran,
			vez,
			trup,
			glass1,
			glass2,
			glass3,
			glass4,
			glass5,
			glass6,
			glass7
        };
		skeletonName = Helicopter;
		class Animations
        {
            // Rotor destruct animations
			class Rotor_destructX
			{
				type = rotationX;
				source = damage;
				selection = "main rotor";
				axis = "velka osa";
				minValue = 0.99;
				maxValue = 1;
				angle0 = (rad 0);
				angle1 = (rad -20);
			};
			class Rotor_destructY: Rotor_destructX
			{
				type = rotationY;
				angle1 = (rad 40);
			};
			class rotordive_destructX: Rotor_destructX
			{
				selection = rotordive;
				angle1 = (rad -5);
			};
			class rotordive_destructY: rotordive_destructX
			{
				type = rotationY;
				angle1 = (rad -15);
			};
			class rotordive_destructZ: rotordive_destructX
			{
				type = rotationZ;
				angle1 = (rad -5);
			};
			class rotor_static_dive_destructX: Rotor_destructX
			{
				selection = "main rotor static";
				angle1 = (rad 5);
			};
			class rotor_static_dive_destructY: rotor_static_dive_destructX
			{
				type = rotationY;
				angle1 = (rad -15);
			};
			class rotor_static_dive_destructZ: rotor_static_dive_destructX
			{
				type = rotationZ;
				angle1 = (rad -5);
			};
			class mala_vrtule_destructY: Rotor_destructX
			{
				type = rotationY;
				selection = "tail rotor";
				axis = "mala osa";
				angle1 = (rad 10);
			};
			class mala_vrtule_destructZ: mala_vrtule_destructY
			{
				type = rotationZ;
				angle1 = (rad 25);
			};
			class damageHide
			{
				type = hide;
				source = damage;
				selection = damageHide;
				minValue = 0;
				maxValue = 1;
				hideValue = 1;
                unHideValue = -1;
			};
            // Instruments animations
            class IndicatorAltBaro
			{
				type = rotation;
				source = altBaro;
				sourceAddress = loop;
				selection = alt;
				axis = osa_alt;
				minValue = 0;
				maxValue = 304;
				angle0 = (rad 0);
				angle1 = (rad -360);
			};
			class IndicatorAltBaro2: IndicatorAltBaro
			{
				selection = alt2;
				axis = osa_alt2;
			};
			class IndicatorAltRadar
			{
				type = rotation;
				source = altRadar;
				selection = nm_alt;
				axis = osa_nm_alt;
				minValue = 0;
				maxValue = 61;
				angle0 = (rad 0);
				angle1 = (rad -180);
			};
			class IndicatorAltRadar2: IndicatorAltRadar
			{
				selection = nm_alt2;
				axis = osa_nm_alt2;
			};
			class IndicatorSpeed
			{
				type = rotation;
				source = speed;
				selection = mph;
				axis = osa_mph;
				minValue = 0;
				maxValue = 125;
				angle0 = (rad 0);
				angle1 = (rad -320);
			};
			class IndicatorSpeed2: IndicatorSpeed
			{
				selection = mph2;
				axis = osa_mph2;
			};
			class IndicatorVertSpeed
			{
				type = rotation;
				source = vertSpeed;
				selection = vert_speed;
				axis = osa_vert_speed;
				minValue = -30;
				maxValue = 30;
				angle0 = (rad 0);
				angle1 = (rad -300);
			};
			class IndicatorVertSpeed2: IndicatorVertSpeed
			{
				selection = vert_speed2;
				axis = osa_vert_speed2;
			};
			class IndicatorRPM
			{
				type = rotation;
				source = rpm;
				selection = rpm;
				axis = osa_rpm;
				minValue = 0;
				maxValue = 12;
				angle0 = (rad 0);
				angle1 = (rad -320);
			};
			class IndicatorRPM2: IndicatorRPM
			{
				selection = rpm2;
				axis = osa_rpm2;
			};
			class IndicatorCompass
			{
				type = rotation;
				source = direction;
				selection = compass;
				axis = osa_kompas;
				minValue = -3.141593;
				maxValue = 3.141593;
				angle0 = (rad 0);
				angle1 = (rad -360);
			};
			class IndicatorCompass2: IndicatorCompass
			{
				selection = compass2;
				axis = osa_kompas2;
			};
			class WatchHour
			{
				type = rotation;
				source = clockHour;
				selection = hodinova;
				axis = osa_time;
				minValue = 0;
				maxValue = 1;
				angle0 = (rad 0);
				angle1 = (rad -360);
			};
			class WatchHour2: WatchHour
			{
				selection = hodinova2;
				axis = osa_time2;
			};
			class WatchMinute
			{
				type = rotation;
				source = clockMinute;
				selection = minutova;
				axis = osa_time;
				minValue = 0;
				maxValue = 1;
				angle0 = (rad 0);
				angle1 = (rad -360);
			};
			class WatchMinute2: WatchMinute
			{
				selection = minutova2;
				axis = osa_time2;
			};
            // Rotor animations
			class HRotor
			{
				type = rotation;
				source = rotorH;
				selection = "main rotor";
				axis = "velka osa";
				minValue = 0;
				maxValue = 1;
				angle0 = (rad 0);
				angle1 = 2 * 3.1415926536;
			};
			class VRotor
			{
				type = rotation;
				source = rotorV;
				selection = "tail rotor";
				axis = "mala osa";
				minValue = 0;
				maxValue = 1;
				angle0 = (rad 0);
				angle1 = 2 * 3.1415926536;
			};
            // False horizon animations
			class HorizonBank
			{
				type = rotationZ;
				source = horizonBank;
				selection = horizont;
				axis = osa_horizont;
				minValue = (rad -360);
				maxValue = (rad 360);
				angle0 = (rad -360);
				angle1 = (rad 360);
			};
			class HorizonDive
			{
				type = rotationX;
				source = horizonDive;
				selection = horizont;
				axis = osa_horizont;
				minValue = -6.283190;
				maxValue = 6.283190;
				angle0 = -6.283190;
				angle1 = 6.283190;
			};
			class Horizon2Bank: HorizonBank
			{
				selection = horizont2;
				axis = osa_horizont2;
			};
			class Horizon2Dive: HorizonDive
			{
				selection = horizont2;
				axis = osa_horizont2;
			};
		};
    };
    class Heli_Attack_03_F: Helicopter
    {
        sectionsInherit = Helicopter;
        sections[] =
        {
            camo1,
            camo2,
            camo3,
            main_elev,
            main_trav
        };
        skeletonName = Heli_Attack_03_F_skeleton;
        class Animations: Animations
        {
            // Turret animations
            class MainTurret
            {
                type = rotation;
                source = mainTurret;
                selection = main_trav;
                axis = main_trav_axis;
                memory = true;
                minValue = (rad -360);
                maxValue = (rad 360);
                angle0 = (rad -360);
                angle1 = (rad 360);
            };
            class MainGun: MainTurret
            {
                source = mainGun;
                selection = main_elev;
                axis = main_elev_axis;
            };
            class TADSTurret: MainTurret
            {
                selection = tads_trav;
                axis = tads_trav_axis;
            };
            class TADSElev: TADSTurret
            {
                source = mainGun;
                selection = tads_elev;
                axis = tads_elev_axis;
            };
            class PNVSTurret: TADSTurret
            {
                selection = pnvs_trav;
                axis = pnvs_trav_axis;
            };
            // False horizon animations
            class ArtificialHorizon_1_Pitch
            {
                type = rotationX;
                source = horizondive;
                selection = ins_ai_1;
                axis = ins_ai_1_pitch_axis;
                minValue = (rad -45);
                maxValue = (rad 45);
                angle0 = (rad -45);
                angle1 = (rad 45);
            };
            class ArtificialHorizon_1_Roll
            {
                type = rotation;
                source = horizonBank;
                selection = ins_ai_1;
                axis = ins_ai_1_roll_axis;
                minValue = (rad -360);
                maxValue = (rad 360);
                angle0 = (rad -360);
                angle1 = (rad 360);
            };
            // Instruments animations
            class AirSpeedIndicator_1
            {
                type = rotation;
                source = speed;
                selection = ins_asi_1;
                axis = ins_asi_1_axis;
                minValue = 0;
                maxValue = 110;
                angle0 = (rad 130);
                angle1 = (rad -200);
            };
            class Altimiter_1
            {
                type = rotation;
                source = altBaro;
                selection = ins_alt_1;
                axis = ins_alt_1_axis;
                sourceAddress = loop;
                minValue = 0;
                maxValue = 100;
                angle0 = (rad 0);
                angle1 = (rad -360);
            };
            class Altimiter_2
            {
                type = rotation;
                source = altBaro;
                selection = ins_alt_2;
                axis = ins_alt_2_axis;
                sourceAddress = loop;
                minValue = 0;
                maxValue = 1000;
                angle0 = (rad 0);
                angle1 = (rad -360);
            };
            class Compass_1
            {
                type = rotation;
                source = direction;
                selection = ins_compass_1;
                axis = ins_compass_1_axis;
                minvalue = (rad -180);
                maxvalue = (rad 180);
                angle0 = (rad 70);
                angle1 = (rad -290);
            };
            // Monitors animations
	        class Monitors_on
	        {
				type = hide;
				source = rpm;
				selection = display_off;
                minValue = 0;
                maxValue = 1;
				hideValue = 0.015;
                unHideValue = -1;
	        };
            // MFD animations
	        class dg_rpm
	        {
				type = translation;
				source = rpm;
				selection = dg_rpm;
				axis = dg_rpm_axis;
				memory = true;
				minValue = 0;
				maxValue = 1;
				offset0 = 1;
				offset1 = 0;
	        };
	        class dg_vertspeed
	        {
				type = translation;
				source = vertSpeed;
				selection = dg_vertspeed;
				axis = dg_vertspeed_axis;
				memory = true;
				minValue = -15;
				maxValue = 15;
				offset0 = -0.5;
				offset1 = 0.5;
	        };
            class dg_compas: Compass_1
            {
                selection = dg_compas;
                axis = dg_compas_axis;
	            sourceaddress = loop;
                angle0 = (rad 0);
                angle1 = (rad 36);
            };
            class dg_pitch: ArtificialHorizon_1_Pitch
            {
                type = rotation;
                selection = dg_pitch;
                axis = dg_pitch_axis;
                minValue = (rad -90);
                maxValue = (rad 90);
                angle0 = (rad -34);
                angle1 = (rad 34);
            };
            class dg_bank: ArtificialHorizon_1_Roll
            {
                type = rotation;
                selection = dg_bank;
                axis = dg_bank_axis;
                minValue = (rad -360);
                maxValue = (rad 360);
                angle0 = (rad 360);
                angle1 = (rad -360);
            };
            // Damper animations
            class Damper_rear
            {
                type = rotation;
                source = altSurface;
                selection = damper_rear;
                axis = damper_rear_axis;
                minValue = 0;
                maxValue = 0.2;
                angle0 = (rad 0);
                angle1 = (rad -9);
            };
            class Damper_left: Damper_rear
            {
                selection = damper_left;
                axis = damper_left_axis;
            };
            class Damper_right: Damper_rear
            {
                selection = damper_right;
                axis = damper_right_axis;
                angle0 = (rad 0);
                angle1 = (rad 9);
            };
            // Elevator animations
            class Elevator
            {
                type = rotation;
                source = speed;
                selection = elevator;
                axis = elevator_axis;
                minValue = 25;
                maxValue = 30;
                angle0 = (rad 28);
                angle1 = (rad 0);
            };
            // Muzzle flash animations
			class zaslehROT
			{
				type = rotationZ;
				source = muzzle_flash;
				sourceAddress = loop;
				selection = zasleh;
				axis = "";
				centerFirstVertex = true;
				minValue = 0;
				maxValue = 4;
				angle0 = (rad 0);
				angle1 = (rad 360);
			};
            // Position lights animations
			class PositionLights
			{
				type = hide;
				source = collisionLights;
				selection = PositionLights;
				minValue = 0;
				maxValue = 1;
				hideValue = 0;
				unHideValue = 0.5;
			};
            // Stick dive animations
            #define STICK_ANGLE (rad 9)
			class stick_pilot_dive_01
			{
				type = rotationX;
				source = cyclicForward;
				axis = stick_pilot_joint;
				selection = stick_pilot;
				minValue = -0.5;
				maxValue = 0.5;
				angle0 = STICK_ANGLE / 3;
				angle1 = -STICK_ANGLE / 3;
			};
			class stick_pilot_dive_02: stick_pilot_dive_01
            {
                minValue = -0.85;
                maxValue = -0.5;
                angle0 = STICK_ANGLE / 3;
                angle1 = (rad 0);
            };
			class stick_pilot_dive_03: stick_pilot_dive_01
            {
                minValue = -1;
                maxValue = -0.85;
                angle0 = STICK_ANGLE / 3;
                angle1 = (rad 0);
            };
			class stick_pilot_dive_04: stick_pilot_dive_01
            {
                minValue = 0.5;
                maxValue = 0.849999;
                angle0 = (rad 0);
                angle1 = -STICK_ANGLE / 3;
            };
			class stick_pilot_dive_05: stick_pilot_dive_01
            {
                minValue = 0.85;
                maxValue = 1;
                angle0 = (rad 0);
                angle1 = -STICK_ANGLE / 3;
            };
            // Stick bank animations
			class stick_pilot_bank_01: stick_pilot_dive_01
			{
				type = rotationZ;
				source = cyclicAside;
				angle0 = -STICK_ANGLE / 3;
				angle1 = STICK_ANGLE / 3;
			};
			class stick_pilot_bank_02: stick_pilot_bank_01
            {
                minValue = -0.849999;
                maxValue = -0.5;
                angle0 = -STICK_ANGLE / 3;
                angle1 = (rad 0);
            };
			class stick_pilot_bank_03: stick_pilot_bank_01
            {
                minValue = -1;
                maxValue = -0.85;
                angle0 =  -STICK_ANGLE / 3;
                angle1 = (rad 0);
            };
			class stick_pilot_bank_04: stick_pilot_bank_01
            {
                minValue = 0.5;
                maxValue = 0.849999;
                angle0 = (rad 0);
                angle1 = STICK_ANGLE / 3;
            };
			class stick_pilot_bank_05: stick_pilot_bank_01
            {
                minValue = 0.85;
                maxValue = 1;
                angle0 = (rad 0);
                angle1 = STICK_ANGLE / 3;
            };
            // Lever collective animations
            class lever_pilot
            {
				type = rotation;
                source = collectiveRTD;
                selection = lever_pilot;
                axis = lever_pilot_axis;
                minValue = 0;
                maxValue = 1;
                angle0 = (rad 12);
                angle1 = (rad -3);
            };
        };
    };
    class Heli_Attack_03_wreck_F: Default
    {
		sectionsInherit = Default;
        sections[] =
        {
            camo1,
            camo2,
            camo3
        };
		skeletonName = Default;
    };
};