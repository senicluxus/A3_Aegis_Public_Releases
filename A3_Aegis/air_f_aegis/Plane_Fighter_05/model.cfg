class Rotation
{
	type = rotation;
	memory = true;
	minValue = 0;
	maxValue = 1;
	angle0 = 0;
	angle1 = 1;
};
class CfgSkeletons
{
	class Default
    {
        isDiscrete = true;
        skeletonInherit = "";
        skeletonBones[] = {};
    };
	class Plane_Fighter_05_F_skeleton: Default
	{
		isDiscrete = true;
        skeletonInherit = Default;
		skeletonBones[] =
		{
			canopy,"",
			canopy_hydraulic_1,canopy,
			canopy_hydraulic_2,canopy_hydraulic_1,
			canopy_int,"",
			canopy_int_hydraulic_1,canopy_int,
			canopy_int_hydraulic_2,canopy_int_hydraulic_1,
			elevatorL,"",
			elevatorR,"",
			engine_nozzle_1,"",
			engine_nozzle_2,"",
			engine_nozzle_3,"",
			engine_nozzle_4,"",
			engine_nozzle_5,"",
			engine_nozzle_6,"",
			engine_nozzle_7,"",
			engine_nozzle_8,"",
			engine_nozzle_9,"",
			engine_nozzle_10,"",
			engine_nozzle_11,"",
			engine_nozzle_12,"",
			engine_nozzle_13,"",
			engine_nozzle_14,"",
			engine_nozzle_15,"",
			engine_nozzle_16,"",
			FlapL,"",
			FlapR,"",
			gear,"",
			gear_lever,"",
			gear_1,"",
			gear_1_stearing,gear_1,
			gear_1_damper,gear_1_stearing,
			gear_1_suspension_spring_1,gear_1_damper,
			gear_1_suspension_spring_2,gear_1_stearing,
			gear_1_hook,gear_1_stearing,
			gear_1_door_1,"",
			gear_1_door_2,"",
			gear_1_door_3,"",
			gear_1_hydraulic,gear_1_door_1,
			gear_2,"",
			gear_2_damper,gear_2,
			gear_2_door_1,"",
			gear_2_door_2,"",
			gear_2_door_2_hydraulic_1,gear_2_door_2,
			gear_2_door_2_hydraulic_2,gear_2_door_2_hydraulic_1,
			gear_2_spring_1,gear_2,
			gear_2_spring_2,gear_2_spring_1,
			gear_2_suspension_spring_1,gear_2_damper,
			gear_2_suspension_spring_2,gear_2,
			gear_2_hydraulic_1,gear_2,
			gear_2_hydraulic_2,gear_2_hydraulic_1,
			gear_3,"",
			gear_3_damper,gear_3,
			gear_3_door_1,"",
			gear_3_door_2,"",
			gear_3_door_2_hydraulic_1,gear_3_door_2,
			gear_3_door_2_hydraulic_2,gear_3_door_2_hydraulic_1,
			gear_3_spring_1,gear_3,
			gear_3_spring_2,gear_3_spring_1,
			gear_3_suspension_spring_1,gear_3_damper,
			gear_3_suspension_spring_2,gear_3,
			gear_3_hydraulic_1,gear_3,
			gear_3_hydraulic_2,gear_3_hydraulic_1,
			ladder_door,"",
			ladder_fold,"",
			ladder_colapse_3,ladder_fold,
			ladder_colapse_2,ladder_colapse_3,
			ladder_colapse_1,ladder_colapse_2,
			ladder_fold_2,ladder_fold,
			ladder_fold_1,ladder_fold_2,
			Light,gear_1,
			mfd_fuel,"",
			mfd_fuel2,"",
			mfd_fuel3,"",
			mfd_oil,"",
			mfd_off,"",
			mfd_off_dmg,"",
			mfd_rpm,"",
			mfd_thrust,"",
			pylonhide,"",
			pylon_3,pylonhide,
			pylon_4,pylonhide,
			pylon_5,pylonhide,
			pylon_6,pylonhide,
			rotor,"",
			engine_exhaust,rotor,
			engine_exhaust_move,engine_exhaust,
			engine_fire,rotor,
			rudderL,"",
			rudderR,"",
			slat_L1,"",
			slat_R1,"",
			stick_pilot,"",
			tailhook,"",
			tailhook_door_1,"",
			tailhook_door_2,"",
			tailhook_door_3,"",
			throttle_pilot,"",
			weapons_bay_L_1,"",
			weapons_bay_L_2,"",
			weapons_bay_L_3,"",
			weapons_bay_L_4,"",
			weapons_bay_R_1,"",
			weapons_bay_R_2,"",
			weapons_bay_R_3,"",
			weapons_bay_R_4,"",
			wheel_1,gear_1_damper,
			wheel_2,gear_2_damper,
			wheel_3,gear_3_damper,
			wing_fold_cover_L,"",
			wing_fold_hinge_L_1,"",
			wing_fold_hinge_L_2,wing_fold_hinge_L_1,
			wing_fold_L,wing_fold_hinge_L_2,
			wing_fold_cover_R,"",
			wing_fold_hinge_R_1,"",
			wing_fold_hinge_R_2,wing_fold_hinge_R_1,
			wing_fold_R,wing_fold_hinge_R_2,
			aileronL,wing_fold_L,
			aileronR,wing_fold_R,
			PositionLight_Green_1,wing_fold_R,
			PositionLight_Red_1,wing_fold_L,
			FakeCollisionLight_White_1,wing_fold_L,
			FakeCollisionLight_White_2,wing_fold_R,
			pylon_1,wing_fold_R,
			pylon_2,wing_fold_L,
			slat_L2,wing_fold_L,
			slat_R2,wing_fold_R,
			ejection_seat,"",
            PIP0_dir,""
		};
	};
	class Plane_Fighter_05_Ejection_Seat_F_skeleton: Default
	{
        skeletonInherit = Default;
		skeletonBones[] =
		{
			ejection_seat,"",
			rocket_flash,""
		};
	};
	class Plane_Fighter_05_wreck_F_skeleton: Default
	{
        skeletonInherit = Default;
		skeletonBones[] =
		{
			ejection_seat,"",
			rocket_flash,""
		};
	};
};
class CfgModels
{
	class Default
    {
        sectionsInherit = "";
        sections[] = {};
        skeletonName = "";
    };
	class Plane_Fighter_05_F: Default
	{
        sectionsInherit = Default;
		sections[] =
		{
			zbytek,
			Camo1,
			Camo2,
			Camo3,
			Camo4,
			CamoGlass,
			camo_cockpit_1,
			camo_cockpit_2,
			autobacklit,
			Light,
			glass1,
			clan,
			zasleh,
			Hit_Avionics,
			Hit_Engine,
			Hit_Hull,
			Hit_RudderL,
			Hit_RudderR,
			Hit_ElevatorL,
			Hit_ElevatorR,
			Hit_AileronL,
			Hit_AileronR
		};
		skeletonName = Plane_Fighter_05_F_skeleton;
		class Animations
		{
			// Canopy animations
			class canopy_rot: Rotation
			{
				type = rotation;
				source = cabin;
				selection = canopy;
				axis = canopy_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0;
				maxValue = 8;
				angle0 = (rad 30);
				angle1 = 0;
			};
			class canopy_hydraulic_1_rot1: canopy_rot
			{
				selection = canopy_hydraulic_1;
				axis = canopy_hydraulic_1_axis;
				minValue = 0;
				maxValue = 4;
				angle0 = (rad 30);
				angle1 = 0;
			};
			class canopy_hydraulic_2_rot1: canopy_rot
			{
				selection = canopy_hydraulic_2;
				axis = canopy_hydraulic_2_axis;
				angle0 = (rad -45);
				angle1 = 0;
			};
			class canopy_hydraulic_2_rot2: canopy_hydraulic_2_rot1
			{
				selection = canopy_hydraulic_2;
				axis = canopy_hydraulic_2_axis;
				minValue = 0;
				maxValue = 4;
				angle0 = (rad -30);
				angle1 = 0;
			};
			
			// Canopy interior animations
			class canopy_int_rot: canopy_rot
			{
				selection = canopy_int;
				axis = canopy_int_axis;
			};
			class canopy_int_hydraulic_1_rot1: canopy_hydraulic_1_rot1
			{
				selection = canopy_int_hydraulic_1;
				axis = canopy_int_hydraulic_1_axis;
			};
			class canopy_int_hydraulic_2_rot1: canopy_hydraulic_2_rot1
			{
				selection = canopy_int_hydraulic_2;
				axis = canopy_int_hydraulic_2_axis;
			};
			class canopy_int_hydraulic_2_rot2: canopy_hydraulic_2_rot2
			{
				selection = canopy_int_hydraulic_2;
				axis = canopy_int_hydraulic_2_axis;
			};

			// Cockpit animations
			class stick_pilot_bank_rot: Rotation
			{
				type = rotation;
				source = aileron;
				axis = stick_pilot_z_axis;
				selection = stick_pilot;
				minValue = (rad -360);
				maxValue = (rad 360);
				angle0 = (rad 44);
				angle1 = (rad -44);
			};
			class stick_pilot_dive_rot: Rotation
			{
				type = rotation;
				source = elevator;
				axis = stick_pilot_x_axis;
				selection = stick_pilot;
				minValue = (rad -360);
				maxValue = (rad 360);
				angle0 = (rad 44);
				angle1 = (rad -44);
			};
			class throttle_pilot
			{
				type = translation;
				source = throttle;
				axis = throttle_pilot_axis;
				selection = throttle_pilot;
				minValue = 0;
				maxValue = 1;
				offset0 = 0.2;
				offset1 = -0.44;
			};
			class gear_lever_rot: Rotation
			{
				type = rotation;
				source = gear;
				selection = gear_lever;
				axis = gear_lever_axis;
				memory = true;
				minValue = 0;
				maxValue = 1;
				angle0 = (rad 35);
				angle1 = (rad -20);
			};

			// Control surfaces animations
			class FlapL_rot: Rotation
			{
				type = rotation;
				source = flap;
				selection = FlapL;
				axis = FlapL_axis;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad -20);
			};
			class FlapR_rot: FlapL_rot
			{
				selection = FlapR;
				axis = FlapR_axis;
			};
			class slat_L1_rot: FlapL_rot
			{
				selection = slat_L1;
				axis = slat_L1_axis;
				minValue = 0.5;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad -15);
			};
			class slat_L2_rot: slat_L1_rot
			{
				selection = slat_L2;
				axis = slat_L2_axis;
			};
			class slat_R1_rot: slat_L1_rot
			{
				selection = slat_R1;
				axis = slat_R1_axis;
				angle0 = 0;
				angle1 = (rad 15);
			};
			class slat_R2_rot: slat_R1_rot
			{
				selection = slat_R2;
				axis = slat_R2_axis;
			};
			class slat_L1_aoa: Rotation
			{
				type = rotation;
				source = aoa;
				selection = slat_L1;
				axis = slat_L1_axis;
				minValue = 0.2;
				maxValue = 0.5;
				angle0 = 0;
				angle1 = -0.3490659;
			};
			class slat_L2_aoa: slat_L1_aoa
			{
				selection = slat_L2;
				axis = slat_L2_axis;
				angle0 = 0;
				angle1 = -0.1745329;
			};
			class slat_R1_aoa: slat_L1_aoa
			{
				selection = slat_R1;
				axis = slat_R1_axis;
				angle0 = 0;
				angle1 = 0.3490659;
			};
			class slat_R2_aoa: slat_R1_aoa
			{
				selection = slat_R2;
				axis = slat_R2_axis;
				angle0 = 0;
				angle1 = 0.1745329;
			};
			class aileronL_rot: Rotation
			{
				type = rotation;
				source = aileronLeftDamaged;
				selection = aileronL;
				axis = aileronL_axis;
				minValue = -1;
				maxValue = 1;
				angle0 = (rad 45);
				angle1 = (rad -45);
			};
			class aileronL_rot2: aileronL_rot
			{
				source = flap;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad 20);
			};
			class aileronR_rot: aileronL_rot
			{
				source = aileronRightDamaged;
				selection = aileronR;
				axis = aileronR_axis;
				angle0 = (rad 45);
				angle1 = (rad -45);
			};
			class aileronR_rot2: aileronR_rot
			{
				source = flap;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad -20);
			};
			class elevatorL_rot1: Rotation
			{
				type = rotation;
				source = elevatorLeftCenterDamaged;
				selection = elevatorL;
				axis = elevatorL_axis;
				minValue = -1;
				maxValue = 1;
				angle0 = (rad 25);
				angle1 = (rad -25);
			};
			class elevatorL_rot2: elevatorL_rot1
			{
				source = aileronLeftDamaged;
				angle0 = (rad -15);
				angle1 = (rad 15);
			};
			class elevatorR_rot1: elevatorL_rot1
			{
				source = elevatorRightDamaged;
				selection = elevatorR;
				axis = elevatorR_axis;
				angle0 = (rad 25);
				angle1 = (rad -25);
			};
			class elevatorR_rot2: elevatorR_rot1
			{
				source = aileronRightDamaged;
				angle0 = (rad 15);
				angle1 = (rad -15);
			}; 
			class rudderL_rot: Rotation
			{
				type = rotation;
				source = rudderLeftCenterDamaged;
				selection = rudderL;
				axis = rudderL_axis;
				minValue = -1;
				maxValue = 1;
				angle0 = (rad 21);
				angle1 = (rad -21);
				memory = true;
			};
			class rudderR_rot: rudderL_rot
			{
				source = rudderRightDamaged;
				selection = rudderR;
				axis = rudderR_axis;
			};
			class FlapL_brake: FlapL_rot
			{
				source = speedBrake;
				angle0 = 0;
				angle1 = (rad -15);
			};
			class FlapR_brake: FlapL_brake
			{
				selection = FlapR;
				axis = FlapR_axis;
			};
			class aileronL_brake: FlapL_brake
			{
				selection = aileronL;
				axis = aileronL_axis;
				angle0 = 0;
				angle1 = (rad -20);
			};
			class aileronR_brake: aileronL_brake
			{
				selection = aileronR;
				axis = aileronR_axis;
				angle0 = 0;
				angle1 = (rad 20);
			};
			class rudderL_brake: FlapL_brake
			{
				selection = rudderL;
				axis = rudderL_axis;
				angle0 = 0;
				angle1 = (rad 21);
			};
			class rudderR_brake: rudderL_brake
			{
				selection = rudderR;
				axis = rudderR_axis;
				angle0 = 0;
				angle1 = (rad -21);
			};

			// Engine animations
			class engine_exhaust_move
			{
				type = translation;
				source = throttle;
				selection = engine_exhaust_move;
				axis = engine_exhaust_axis;
				minValue = 0;
				maxValue = 1;
				offset0 = 0;
				offset1 = 2;
			};
			class engine_fire_unhide
			{
				type = hide;
				source = rpm;
				selection = engine_fire;
				minValue = 0;
				maxValue = 1;
				hideValue = 0;
				unHideValue = 0.5;
			};
			class engine_nozzle_1_rot
			{
				type = rotation;
				source = throttle;
				selection = engine_nozzle_1;
				axis = engine_nozzle_1_axis;
				minValue = 0;
				maxValue = 1;
				angle0 = (rad 12);
				angle1 = 0;
			};
			class engine_nozzle_2_rot: engine_nozzle_1_rot
			{
				selection = engine_nozzle_2;
				axis = engine_nozzle_2_axis;
			};
			class engine_nozzle_3_rot: engine_nozzle_2_rot
			{
				selection = engine_nozzle_3;
				axis = engine_nozzle_3_axis;
			};
			class engine_nozzle_4_rot: engine_nozzle_3_rot
			{
				selection = engine_nozzle_4;
				axis = engine_nozzle_4_axis;
			};
			class engine_nozzle_5_rot: engine_nozzle_4_rot
			{
				selection = engine_nozzle_5;
				axis = engine_nozzle_5_axis;
			};
			class engine_nozzle_6_rot: engine_nozzle_5_rot
			{
				selection = engine_nozzle_6;
				axis = engine_nozzle_6_axis;
			};
			class engine_nozzle_7_rot: engine_nozzle_6_rot
			{
				selection = engine_nozzle_7;
				axis = engine_nozzle_7_axis;
			};
			class engine_nozzle_8_rot: engine_nozzle_7_rot
			{
				selection = engine_nozzle_8;
				axis = engine_nozzle_8_axis;
			};
			class engine_nozzle_9_rot: engine_nozzle_8_rot
			{
				selection = engine_nozzle_9;
				axis = engine_nozzle_9_axis;
			};
			class engine_nozzle_10_rot: engine_nozzle_9_rot
			{
				selection = engine_nozzle_10;
				axis = engine_nozzle_10_axis;
			};
			class engine_nozzle_11_rot: engine_nozzle_10_rot
			{
				selection = engine_nozzle_11;
				axis = engine_nozzle_11_axis;
			};
			class engine_nozzle_12_rot: engine_nozzle_11_rot
			{
				selection = engine_nozzle_12;
				axis = engine_nozzle_12_axis;
			};
			class engine_nozzle_13_rot: engine_nozzle_12_rot
			{
				selection = engine_nozzle_13;
				axis = engine_nozzle_13_axis;
			};
			class engine_nozzle_14_rot: engine_nozzle_13_rot
			{
				selection = engine_nozzle_14;
				axis = engine_nozzle_14_axis;
			};
			class engine_nozzle_15_rot: engine_nozzle_14_rot
			{
				selection = engine_nozzle_15;
				axis = engine_nozzle_15_axis;
			};
			class engine_nozzle_16_rot: engine_nozzle_15_rot
			{
				selection = engine_nozzle_16;
				axis = engine_nozzle_16_axis;
			};
			class rotor_rot: Rotation
			{
				type = rotation;
				source = rotor;
				selection = rotor;
				axis = rotor_axis;
				memory = true;
				sourceAddress = loop;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad 360);
			};

			// Fold wings animations
			class wing_fold_cover_L: Rotation
			{
				type = rotation;
				source = user;
				selection = wing_fold_cover_L;
				axis = wing_fold_cover_L_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad -70);
			};
			class wing_fold_hinge_L_1
			{
				type = translation;
				source = user;
				selection = wing_fold_hinge_L_1;
				axis = wing_fold_hinge_L_1_axis;
				memory = true;
				minValue = 0;
				maxValue = 0.2;
				offset0 = 0;
				offset1 = 0.01;
			};
			class wing_fold_hinge_L_2: wing_fold_hinge_L_1
			{
				selection = wing_fold_hinge_L_2;
				axis = wing_fold_hinge_L_2_axis;
				offset0 = 0;
				offset1 = 0.085;
			};
			class wing_fold_L: Rotation
			{
				type = rotation;
				source = user;
				selection = wing_fold_L;
				axis = wing_fold_L_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad 100);
			};
			class wing_fold_cover_R: wing_fold_cover_L
			{
				selection = wing_fold_cover_R;
				axis = wing_fold_cover_R_axis;
			};
			class wing_fold_hinge_R_1: wing_fold_hinge_L_1
			{
				selection = wing_fold_hinge_R_1;
				axis = wing_fold_hinge_R_1_axis;
			};
			class wing_fold_hinge_R_2: wing_fold_hinge_L_2
			{
				selection = wing_fold_hinge_R_2;
				axis = wing_fold_hinge_R_2_axis;
			};
			class wing_fold_R: wing_fold_L
			{
				selection = wing_fold_R;
				axis = wing_fold_R_axis;
				angle0 = 0;
				angle1 = (rad -100);
			};

			// Gear animations
			class gear_1_rot: Rotation
			{
				type = rotation;
				source = gear;
				selection = gear_1;
				axis = gear_1_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0.3;
				maxValue = 0.7;
				angle0 = 0;
				angle1 = (rad 95);
			};
			class gear_1_stearing_rot: Rotation
			{
				type = rotation;
				source = noseWheelTurn;
				selection = gear_1_stearing;
				axis = gear_1_damper_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = -1;
				maxValue = 1;
				angle0 = (rad -35);
				angle1 = (rad 35);
			};
			class gear_1_hydraulic_move
			{
				type = translation;
				source = gear;
				selection = gear_1_hydraulic;
				axis = gear_1_hydraulic_axis;
				minValue = 0.3;
				maxValue = 0.7;
				offset0 = 0;
				offset1 = -0.7;
			};
			class gear_1_door_1_rot: gear_1_rot
			{
				selection = gear_1_door_1;
				axis = gear_1_door_1_axis;
				minValue = 0.3;
				maxValue = 0.7;
				angle0 = 0;
				angle1 = (rad 31.588);
			};
			class gear_1_door_2_rot: gear_1_rot
			{
				selection = gear_1_door_2;
				axis = gear_1_door_2_axis;
				minValue = 0.7;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad -75);
			};
			class gear_1_door_3_rot: gear_1_rot
			{
				selection = gear_1_door_3;
				axis = gear_1_door_3_axis;
				minValue = 0.7;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad -75);
			};
			class gear_1_damper_move
			{
				type = translation;
				source = Damper_1_source;
				selection = gear_1_damper;
				axis = gear_1_damper_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0;
				maxValue = 1;
				offset0 = 0.15;
				offset1 = -0.15;
			};
			class gear_1_suspension_spring_1_rot: gear_1_damper_move
			{
				type = rotation;
				selection = gear_1_suspension_spring_1;
				axis = gear_1_suspension_spring_1_axis;
				angle0 = (rad -9.5);
				angle1 = (rad 9.5);
			};
			class gear_1_suspension_spring_2_rot: gear_1_suspension_spring_1_rot
			{
				selection = gear_1_suspension_spring_2;
				axis = gear_1_suspension_spring_2_axis;
				angle0 = (rad 6.5);
				angle1 = (rad -6.5);
			};
			class gear_1_suspension_spring_1_hide
			{
				type = hide;
				source = gear;
				selection = gear_1_suspension_spring_1;
				minValue = 0;
				maxValue = 1;
				hideValue = 0.9;
				unHideValue = -1;
			};
			class gear_1_suspension_spring_2_hide: gear_1_suspension_spring_1_hide
			{
				selection = gear_1_suspension_spring_2;
			};
            class gear_1_hook_rot: gear_1_rot
            {
                selection = gear_1_hook;
                axis = gear_1_hook_axis;
                angle0 = 0;
                angle1 = 0.7853982;
            };
			class gear_2_rot: Rotation
			{
				type = rotation;
				source = gear;
				selection = gear_2;
				axis = gear_2_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0.2;
				maxValue = 0.7;
				angle0 = 0;
				angle1 = (rad 100);
			};
			class gear_2_door_1_rot: gear_2_rot
			{
				selection = gear_2_door_1;
				axis = gear_2_door_1_axis;
				minValue = 0.7;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad 75);
			};
			class gear_2_door_2_rot1: gear_2_rot
			{
				selection = gear_2_door_2;
				axis = gear_2_door_2_axis;
				minValue = 0;
				maxValue = 0.3;
				angle0 = 0;
				angle1 = (rad 85);
			};
			class gear_2_door_2_rot2: gear_2_door_2_rot1
			{
				minValue = 0.65;
				maxValue = 0.95;
				angle0 = 0;
				angle1 = (rad -85);
			};
			class gear_2_door_2_hydraulic_1_rot1: gear_2_door_2_rot1
			{
				selection = gear_2_door_2_hydraulic_1;
				axis = gear_2_door_2_hydraulic_1_axis;
				angle0 = 0;
				angle1 = (rad -8);
			};
			class gear_2_door_2_hydraulic_1_move1: gear_2_door_2_rot1
			{
				type = translation;
				selection = gear_2_door_2_hydraulic_2;
				axis = gear_2_door_2_hydraulic_2_axis;
				offset0 = 0;
				offset1 = 0.93;
			};
			class gear_2_door_2_hydraulic_1_rot2: gear_2_door_2_hydraulic_1_rot1
			{
				minValue = 0.65;
				maxValue = 0.95;
				angle0 = 0;
				angle1 = (rad 8);
			};
			class gear_2_door_2_hydraulic_1_move2: gear_2_door_2_hydraulic_1_move1
			{
				minValue = 0.65;
				maxValue = 0.95;
				offset0 = 0;
				offset1 = -0.93;
			};
			class gear_2_damper_move
			{
				type = translation;
				source = Damper_2_source;
				selection = gear_2_damper;
				axis = gear_2_damper_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0;
				maxValue = 1;
				offset0 = 0.15;
				offset1 = -0.15;
			};
			class gear_2_suspension_spring_1_rot: gear_2_damper_move
			{
				type = rotation;
				selection = gear_2_suspension_spring_1;
				axis = gear_2_suspension_spring_1_axis;
				angle0 = (rad -8);
				angle1 = (rad 8);
			};
			class gear_2_suspension_spring_2_rot: gear_2_suspension_spring_1_rot
			{
				selection = gear_2_suspension_spring_2;
				axis = gear_2_suspension_spring_2_axis;
				angle0 = (rad 5.5);
				angle1 = (rad -5.5);
			};
			class gear_2_suspension_spring_1_hide
			{
				type = hide;
				source = gear;
				selection = gear_2_suspension_spring_1;
				minValue = 0;
				maxValue = 1;
				hideValue = 0.9;
				unHideValue = -1;
			};
			class gear_2_suspension_spring_2_hide: gear_2_suspension_spring_1_hide
			{
				selection = gear_2_suspension_spring_2;
			};
			class gear_2_spring_1_rot: Rotation
			{
				type = rotation;
				source = gear;
				selection = gear_2_spring_1;
				axis = gear_2_spring_1_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0.2;
				maxValue = 0.7;
				angle0 = 0;
				angle1 = (rad 40);
			};
			class gear_2_spring_2_rot: gear_2_spring_1_rot
			{
				selection = gear_2_spring_2;
				axis = gear_2_spring_2_axis;
				angle0 = 0;
				angle1 = (rad -160);
			};
			class gear_2_hydraulic_1_rot: Rotation
			{
				type = rotation;
				source = gear;
				selection = gear_2_hydraulic_1;
				axis = gear_2_hydraulic_1_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0.2;
				maxValue = 0.7;
				angle0 = 0;
				angle1 = (rad 90);
			};
			class gear_2_hydraulic_2_move
			{
				type = translation;
				source = gear;
				selection = gear_2_hydraulic_2;
				axis = gear_2_hydraulic_2_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0.2;
				maxValue = 0.7;
				offset0 = 0;
				offset1 = 0.8;
			};
			class gear_3_rot: Rotation
			{
				type = rotation;
				source = gear;
				selection = gear_3;
				axis = gear_3_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0.2;
				maxValue = 0.7;
				angle0 = 0;
				angle1 = (rad 100);
			};
			class gear_3_door_1_rot: gear_3_rot
			{
				selection = gear_3_door_1;
				axis = gear_3_door_1_axis;
				minValue = 0.7;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad -75);
			};
			class gear_3_door_2_rot1: gear_3_rot
			{
				selection = gear_3_door_2;
				axis = gear_3_door_2_axis;
				minValue = 0;
				maxValue = 0.3;
				angle0 = 0;
				angle1 = (rad 85);
			};
			class gear_3_door_2_rot2: gear_3_door_2_rot1
			{
				minValue = 0.65;
				maxValue = 0.95;
				angle0 = 0;
				angle1 = (rad -85);
			};
			class gear_3_door_2_hydraulic_1_rot1: gear_3_door_2_rot1
			{
				selection = gear_3_door_2_hydraulic_1;
				axis = gear_3_door_2_hydraulic_1_axis;
				angle0 = 0;
				angle1 = (rad 8);
			};
			class gear_3_door_2_hydraulic_1_move1: gear_3_door_2_rot1
			{
				type = translation;
				selection = gear_3_door_2_hydraulic_2;
				axis = gear_3_door_2_hydraulic_2_axis;
				offset0 = 0;
				offset1 = 0.93;
			};
			class gear_3_door_2_hydraulic_1_rot2: gear_3_door_2_hydraulic_1_rot1
			{
				minValue = 0.65;
				maxValue = 0.95;
				angle0 = 0;
				angle1 = (rad -8);
			};
			class gear_3_door_2_hydraulic_1_move2: gear_3_door_2_hydraulic_1_move1
			{
				minValue = 0.65;
				maxValue = 0.95;
				offset0 = 0;
				offset1 = -0.93;
			};
			class gear_3_damper_move
			{
				type = translation;
				source = Damper_3_source;
				selection = gear_3_damper;
				axis = gear_3_damper_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0;
				maxValue = 1;
				offset0 = 0.15;
				offset1 = -0.15;
			};
			class gear_3_suspension_spring_1_rot: gear_3_damper_move
			{
				type = rotation;
				selection = gear_3_suspension_spring_1;
				axis = gear_3_suspension_spring_1_axis;
				angle0 = (rad -8);
				angle1 = (rad 8);
			};
			class gear_3_suspension_spring_2_rot: gear_3_suspension_spring_1_rot
			{
				selection = gear_3_suspension_spring_2;
				axis = gear_3_suspension_spring_2_axis;
				angle0 = (rad 5.5);
				angle1 = (rad -5.5);
			};
			class gear_3_suspension_spring_1_hide
			{
				type = hide;
				source = gear;
				selection = gear_3_suspension_spring_1;
				minValue = 0;
				maxValue = 1;
				hideValue = 0.9;
				unHideValue = -1;
			};
			class gear_3_suspension_spring_2_hide: gear_3_suspension_spring_1_hide
			{
				selection = gear_3_suspension_spring_2;
			};
			class gear_3_spring_1_rot: Rotation
			{
				type = rotation;
				source = gear;
				selection = gear_3_spring_1;
				axis = gear_3_spring_1_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0.2;
				maxValue = 0.7;
				angle0 = 0;
				angle1 = (rad -40);
			};
			class gear_3_spring_2_rot: gear_3_spring_1_rot
			{
				selection = gear_3_spring_2;
				axis = gear_3_spring_2_axis;
				angle0 = 0;
				angle1 = (rad 160);
			};
			class gear_3_hydraulic_1_rot: Rotation
			{
				type = rotation;
				source = gear;
				selection = gear_3_hydraulic_1;
				axis = gear_3_hydraulic_1_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0.2;
				maxValue = 0.7;
				angle0 = 0;
				angle1 = (rad -90);
			};
			class gear_3_hydraulic_2_move
			{
				type = translation;
				source = gear;
				selection = gear_3_hydraulic_2;
				axis = gear_3_hydraulic_2_axis;
				memory = true;
				sourceAddress = clamp;
				minValue = 0.2;
				maxValue = 0.7;
				offset0 = 0;
				offset1 = 0.8;
			};

			// Gear hook animations
            class gear_1_hook_down
            {
                type = rotation;
                source = user;
                selection = gear_1_hook;
                axis = gear_1_hook_axis;
                minValue = 0.45;
                maxValue = 0.9;
                angle0 = 0;
                angle1 = 1.570796;
            };

			// Wheel animations
			class Wheel_1
			{
				type = rotation;
				source = Wheel_1_source;
				selection = wheel_1;
				axis = wheel_1_axis;
				memory = true;
				sourceAddress = loop;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad -360);
			};
			class Wheel_2: Wheel_1
			{
				source = Wheel_2_source;
				selection = wheel_2;
				axis = wheel_2_axis;
				angle0 = 0;
				angle1 = (rad -360);
			};
			class Wheel_3: Wheel_1
			{
				source = Wheel_3_source;
				selection = wheel_3;
				axis = wheel_3_axis;
				angle0 = 0;
				angle1 = (rad -360);
			};

			// Ladder animations
			class ladder_door_rot: Rotation
			{
				type = rotation;
				source = cabin;
				selection = ladder_door;
				axis = ladder_door_axis;
				memory= true;
				sourceAddress = clamp;
				minValue = 5;
				maxValue = 8;
				angle0 = (rad 110);
				angle1 = 0;
			};
			class ladder_fold_rot: Rotation
			{
				type = rotation;
				source = cabin;
				selection = ladder_fold;
				axis = ladder_fold_axis;
				memory= true;
				sourceAddress = clamp;
				minValue = 2;
				maxValue = 4;
				angle0 = 0;
				angle1 = (rad 30);
			};
			class ladder_colapse_1_move
			{
				type = translation;
				source = cabin;
				selection = ladder_colapse_1;
				axis = ladder_colapse_1_axis;
				memory= true;
				minValue = 0;
				maxValue = 1;
				offset0 = 0;
				offset1 = -0.9;
			};
			class ladder_colapse_2_move: ladder_colapse_1_move
			{
				selection = ladder_colapse_2;
				axis = ladder_colapse_2_axis;
				minValue = 1;
				maxValue = 2;
			};
			class ladder_colapse_3_move: ladder_colapse_1_move
			{
				selection = ladder_colapse_3;
				axis = ladder_colapse_3_axis;
				minValue = 2;
				maxValue = 3;
			};
			class ladder_fold_1_rot: Rotation
			{
				type = rotation;
				source = cabin;
				selection = ladder_fold_1;
				axis = ladder_fold_1_axis;
				memory= true;
				sourceAddress = clamp;
				minValue = 2;
				maxValue = 2.8;
				angle0 = 0;
				angle1 = (rad -105);
			};
			class ladder_fold_2_rot: ladder_fold_1_rot
			{
				selection = ladder_fold_2;
				axis = ladder_fold_2_axis;
				angle0 = 0;
				angle1 = (rad 70);
			};

			// MFD animations
			class mfd_off_hide
			{
				type = hide;
				source = rpm;
				selection = mfd_off;
                minValue = 0;
                maxValue = 1;
				hideValue = 0.015;
                unHideValue = -1;
			};
			class mfd_off_damage
			{
				type = hide;
				source = HitAvionics;
				selection = mfd_off_dmg;
				minValue = 0;
				maxValue = 1;
				hideValue = 0;
				unHideValue = 0.9;
			};
			class mfd_fuel_move
			{
				type = translation;
				source = fuel;
				selection = mfd_fuel;
				axis = mfd_v_axis;
				minValue = 0;
				maxValue = 1;
				offset0 = -7;
				offset1 = 0;
			};
			class mfd_fuel2_move: mfd_fuel_move
			{
				selection = mfd_fuel2;
				offset0 = -3;
				offset1 = 0;
			};
			class mfd_fuel3_move: mfd_fuel_move
			{
				selection = mfd_fuel3;
				offset0 = -2.8;
				offset1 = 0;
			};
			class mfd_rpm_rot: Rotation
			{
				type = rotation;
				source = rpm;
				selection = mfd_rpm;
				axis = mfd_rpm_axis;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad 180);
			};
			class mfd_oil_rot: Rotation
			{
				type = rotation;
				source = oil;
				selection = mfd_oil;
				axis = mfd_oil_axis;
				minValue = 0;
				maxValue = 1;
				angle0 = 0;
				angle1 = (rad 94);
			};
			/*
			class mfd_flaps_unhide
			{
				type = hide;
				source = flap;
				selection = mfd_flaps;
				memory = true;
				minValue = 0;
				maxValue = 0.5;
				hideValue = 0;
				unHideValue = 0.5;
			};
			class mfd_gear_hide
			{
				type = hide;
				source = gear;
				selection = mfd_gear;
				memory = true;
				minValue = 0;
				maxValue = 0.5;
				hideValue = 0;
				unHideValue = 0.5;
			};
			class mfd_collisionLights_unhide
			{
				type = hide;
				source = collisionLights;
				selection = mfd_collisionLights;
				minValue = 0;
				maxValue = 1;
				hideValue = 0;
				unHideValue = 0.5;
			};
			*/

			// Position lights animations
			class PositionLight_Green_1_unhide
			{
				type = hide;
				source = collisionLights;
				selection = PositionLight_Green_1;
				minValue = 0;
				maxValue = 1;
				hideValue = 0;
				unHideValue = 0.5;
			};
			class PositionLight_Red_1_unhide
			{
				type = hide;
				source = collisionLights;
				selection = PositionLight_Red_1;
				minValue = 0;
				maxValue = 1;
				hideValue = 0;
				unHideValue = 0.5;
			};
            class FakeCollisionLight_White_1_blinking
            {
				type = hide;
				source = FakeCollisionLight_White_1_source;
				selection = FakeCollisionLight_White_1;
				minValue = 0;
				maxValue = 1;
                hideValue = 0;
                unHideValue = 0.1;
            };
            class FakeCollisionLight_White_2_blinking: FakeCollisionLight_White_1_blinking
            {
				source = FakeCollisionLight_White_2_source;
				selection = FakeCollisionLight_White_2;
            };

			// Pylon animations
			class pylon_damage_hide
			{
				type = hide;
				source = damage;
				selection = pylonhide;
				minValue = 0;
				maxValue = 1;
                hideValue = 1;
                unHideValue = -1;
			};
			class pylon_1_hide
			{
				type = hide;
				source = user;
				selection = pylon_1;
				minValue = 0;
				maxValue = 1;
				hideValue = 0.001;
				unHideValue = -1;
			};
			class pylon_2_hide: pylon_1_hide
			{
				selection = pylon_2;
			};
			class pylon_3_hide: pylon_1_hide
			{
				selection = pylon_3;
			};
			class pylon_4_hide: pylon_1_hide
			{
				selection = pylon_4;
			};
			class pylon_5_hide: pylon_1_hide
			{
				selection = pylon_5;
			};
			class pylon_6_hide: pylon_1_hide
			{
				selection = pylon_6;
			};

			// Tailhook animations
			class tailhook
            {
                type = rotation;
                source = tailhook;
                selection = tailhook;
                axis = tailhook_axis;
                minValue = 0;
                maxValue = 0.8;
				angle0 = (rad 70);
				angle1 = 0;
            };
			class tailhook_door_1: Rotation
			{
                type = rotation;
				source = user;
				selection = tailhook_door_1;
				axis = tailhook_door_1_axis;
                minValue = 0.7;
                maxValue = 1;
				angle0 = (rad 25);
				angle1 = 0;
			};
			class tailhook_door_2: tailhook_door_1
			{
				selection = tailhook_door_2;
				axis = tailhook_door_2_axis;
				angle0 = (rad 110);
				angle1 = 0;
			};
			class tailhook_door_3: tailhook_door_1
			{
				selection = tailhook_door_3;
				axis = tailhook_door_3_axis;
				angle0 = (rad -110);
				angle1 = 0;
			};

			// Weapon bay animations
			class weapons_bay_L_1_rot: Rotation
			{
				type = rotation;
				source = bay.1;
				sourceAddress = clamp;
				selection = weapons_bay_L_1;
				axis = weapons_bay_L_1_axis;
				animPeriod = 0;
				minValue = 0;
				maxValue = 0.5;
				angle0 = 0;
				angle1 = (rad 80);
			};
			class weapons_bay_L_2_rot: weapons_bay_L_1_rot
			{
				selection = weapons_bay_L_2;
				axis = weapons_bay_L_2_axis;
			};
			class weapons_bay_L_3_rot: weapons_bay_L_1_rot
			{
				selection = weapons_bay_L_3;
				axis = weapons_bay_L_3_axis;
				angle0 = 0;
				angle1 = (rad -70);
			};
			class weapons_bay_L_4_rot: weapons_bay_L_3_rot
			{
				selection = weapons_bay_L_4;
				axis = weapons_bay_L_4_axis;
			};
			class weapons_bay_R_1_rot: weapons_bay_L_1_rot
			{
				source = bay.2;
				selection = weapons_bay_R_1;
				axis = weapons_bay_R_1_axis;
				angle0 = 0;
				angle1 = (rad -80);
			};
			class weapons_bay_R_2_rot: weapons_bay_R_1_rot
			{
				selection = weapons_bay_R_2;
				axis = weapons_bay_R_2_axis;
				angle0 = 0;
				angle1 = (rad 80);
			};
			class weapons_bay_R_3_rot: weapons_bay_L_3_rot
			{
				source = bay.2;
				selection = weapons_bay_R_3;
				axis = weapons_bay_R_3_axis;
				angle0 = 0;
				angle1 = (rad -70);
			};
			class weapons_bay_R_4_rot: weapons_bay_R_3_rot
			{
				selection = weapons_bay_R_4;
				axis = weapons_bay_R_4_axis;
			};

			// Ejection seat animations
			class canopy_hide
			{
				type = hide;
				source = user;
				selection = canopy;
				minValue = 0;
				maxValue = 1;
				minPhase = 0;
				maxPhase = 1;
				initPhase = 0;
				hideValue = 0.001;
			};
			class ejection_seat_hide
			{
				type = hide;
				source = user;
				selection = ejection_seat;
				minPhase = 0;
				maxPhase = 1;
				initPhase = 0;
				minValue = 0;
				maxValue = 1;
				hideValue = 0.001;
			};
			class ejection_seat_motion
			{
				type = translation;
				source = user;
				selection = ejection_seat;
				begin = tns_ejection_seat;
				end = tns_ejection_seat_end;
				animPeriod = 0;
				memory = true;
				minValue = 0;
				maxValue = 1;
				offset0 = 0;
				offset1 = 3;
			};

            // Picture-in-picture animations
			class PIP_rotH: Rotation
			{
				type = rotation;
				source = pilotCameraRotX;
				selection = PIP0_dir;
				axis = PilotCamera_rotH_axis;
                minValue = (rad -360);
                maxValue = (rad 360);
                angle0 = (rad -360);
                angle1 = (rad 360);
			};
			class PIP_rotV: PIP_rotH
			{
				source = pilotCameraRotY;
				axis = PilotCamera_rotV_axis;
			};
		};
	};
	class Plane_Fighter_05_Ejection_Seat_F: Default
	{
		skeletonName = Plane_Fighter_05_Ejection_Seat_F_skeleton;
		sectionsInherit = "";
		sections[] = {zasleh};
		class Animations
		{
			class Rocket_Flash_hide
			{
				type = hide;
				source = user;
				selection = rocket_flash;
				sourceAddress = mirror;
				minValue = -1.5;
				maxValue = 0;
				hideValue = 0.99;
			};
		};
	};
	class Plane_Fighter_05_wreck_F: Default
    {
        sectionsInherit = Default;
		sections[] =
		{
			Camo1,
			Camo2,
			Camo3,
			Camo4
		};
        skeletonName = Plane_Fighter_05_wreck_F_skeleton;
    };
};