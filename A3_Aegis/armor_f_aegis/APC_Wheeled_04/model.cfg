class CfgSkeletons
{
    class Default
    {
        isDiscrete = true;
        skeletonInherit = "";
        skeletonBones[] = {};
    };
	class Vehicle: Default{};
    class Car: Vehicle
    {
        skeletonBones[] =
        {
            drivewheel,"",

            wheel_1_1_damper_land,"",
            wheel_1_2_damper_land,"",
            wheel_1_3_damper_land,"",
            wheel_1_4_damper_land,"",

            wheel_2_1_damper_land,"",
            wheel_2_2_damper_land,"",
            wheel_2_3_damper_land,"",
            wheel_2_4_damper_land,"",

            wheel_1_1_damper,wheel_1_1_damper_land,
            wheel_1_2_damper,wheel_1_2_damper_land,
            wheel_1_3_damper,wheel_1_3_damper_land,
            wheel_1_4_damper,wheel_1_4_damper_land,

            wheel_2_1_damper,wheel_2_1_damper_land,
            wheel_2_2_damper,wheel_2_2_damper_land,
            wheel_2_3_damper,wheel_2_3_damper_land,
            wheel_2_4_damper,wheel_2_4_damper_land,

            wheel_1_1_steering,wheel_1_1_damper,
            wheel_1_2_steering,wheel_1_2_damper,
            wheel_1_3_steering,wheel_1_3_damper,
            wheel_1_4_steering,wheel_1_4_damper,

            wheel_2_1_steering,wheel_2_1_damper,
            wheel_2_2_steering,wheel_2_2_damper,
            wheel_2_3_steering,wheel_2_3_damper,
            wheel_2_4_steering,wheel_2_4_damper,

            wheel_1_1,wheel_1_1_steering,
            wheel_1_2,wheel_1_2_steering,
            wheel_1_3,wheel_1_3_steering,
            wheel_1_4,wheel_1_4_steering,

            wheel_2_1,wheel_2_1_steering,
            wheel_2_2,wheel_2_2_steering,
            wheel_2_3,wheel_2_3_steering,
            wheel_2_4,wheel_2_4_steering,

            wheel_1_1_unhide,wheel_1_1,
            wheel_1_2_unhide,wheel_1_2,
            wheel_1_3_unhide,wheel_1_3,
            wheel_1_4_unhide,wheel_1_4,

            wheel_2_1_unhide,wheel_2_1,
            wheel_2_2_unhide,wheel_2_2,
            wheel_2_3_unhide,wheel_2_3,
            wheel_2_4_unhide,wheel_2_4,

            wheel_1_1_hide,wheel_1_1,
            wheel_1_2_hide,wheel_1_2,
            wheel_1_3_hide,wheel_1_3,
            wheel_1_4_hide,wheel_1_4,

            wheel_2_1_hide,wheel_2_1,
            wheel_2_2_hide,wheel_2_2,
            wheel_2_3_hide,wheel_2_3,
            wheel_2_4_hide,wheel_2_4,

            OtocVez,"",
            OtocHlaven,OtocVez,

            damageHide,"",
            damageVez,OtocVez,
            damageHlaven,OtocHlaven,
            glass1,damageHide,
            glass2,damageHide,
            glass3,damageHide,
            glass4,damageHide,

            ukaz_rychlo,"",
            ukaz_rychlo2,"",
            ukaz_rpm,"",
            mph,"",
            rpm,"",
            fuel,"",
            fuel_01,"",
            fuel_1,"",
            fuel_2,"",
            fuel_3,"",
            prop_01,"",
            prop_02,"",
            prop_1,"",
            prop_2,""
        };
    };
    class APC_Wheeled_04_base_F_skeleton: Car
    {
		skeletonInherit = Car;
        skeletonBones[] =
        {
            reverse_light,damageHide,
            rearlights,damageHide,

            driver_seat,"",
            hatch_driver,"",
            hatch_commander,"",
            pedal_thrust,"",
            pedal_brake,"",
            prop_3,""
        };
    };
    class APC_Wheeled_04_cannon_F_skeleton: APC_Wheeled_04_base_F_skeleton
    {
        skeletonInherit = APC_Wheeled_04_base_F_skeleton;
        skeletonBones[] =
        {
            launcher,OtocVez,
            Missiles,launcher,
            Missile_1,Missiles,
            Missile_2,Missiles,
            Missile_3,Missiles,
            Missile_4,Missiles,
            Missile_move,launcher,
            
            recoilHlaven,OtocHlaven,

            Commander_turret,OtocVez,
            Commander_gun,Commander_turret,

            zasleh,OtocHlaven,
            zasleh2,OtocHlaven
        };
    };
    class APC_Wheeled_04_cannon_v2_F_skeleton: APC_Wheeled_04_base_F_skeleton
    {
        skeletonInherit = APC_Wheeled_04_base_F_skeleton;
        skeletonBones[] =
        {
            recoilHlaven,OtocHlaven,

            Commander_turret,OtocVez,
            Commander_gun,Commander_turret,

            muzzleflash_cannon,OtocHlaven,
            zasleh,OtocHlaven
        };
    };
};
class CfgModels
{
	class Default
	{
        sectionsInherit = "";
        sections[] = {};
        skeletonName = "";
	};
    class Vehicle: Default
    {
        sections[] =
        {
            cislo,
            grupa,
            side,
            sektor,
            clan,
            clan_sign,
            "podsvit pristroju",
            poskozeni,
            Light_R,
            Light_L,
            zasleh
        };
    };  
    class Car: Vehicle
    {
        sections[] =
        {
            ammo,
            "zadni svetlo",
            "brzdove svetlo",
            spz,
            motor,
            body,
            clan,
            clan_sign,
            zasleh,
            Light_R,
            Light_L,
            "podsvit pristroju",
            glass1,
            glass2,
            glass3,
            glass4,
            glass5,
            glass6
        };
        class Animations
        {
            // destruct START
            class damageHide
            {
                type = hide;
                source = damage;
                selection = damageHide;
                hideValue = 1.0;
            };

            // Wheels START
            // Wheels Complete Destruct START
            class wheel_1_1_destruct
            {
                type = hide;
                selection = wheel_1_1_hide;
                source = HitLFWheel;
                minValue = 0; // upravit na 0.99
                maxValue = 1; // upravit na 1.0
                hidevalue = 0.99999;
            };
            class wheel_1_2_destruct: wheel_1_1_destruct
            {
                source = HitLBWheel;
                selection = wheel_1_2_hide;
            };
            class wheel_1_3_destruct: wheel_1_1_destruct
            {
                source = HitLMWheel;
                selection = wheel_1_3_hide;
            };
            class wheel_1_4_destruct: wheel_1_1_destruct
            {
                source = HitLF2Wheel;
                selection = wheel_1_4_hide;
            };

            class wheel_2_1_destruct: wheel_1_1_destruct
            {
                source = HitRFWheel;
                selection = wheel_2_1_hide;
            };
            class wheel_2_2_destruct: wheel_1_1_destruct
            {
                source = HitRBWheel;
                selection = wheel_2_2_hide;
            };
            class wheel_2_3_destruct: wheel_1_1_destruct
            {
                source = HitRMWheel;
                selection = wheel_2_3_hide;
            };
            class wheel_2_4_destruct: wheel_1_1_destruct
            {
                source = HitRF2Wheel;
                selection = wheel_2_4_hide;
            };

            class wheel_1_1_destruct_unhide
            {
                type = hide;
                selection = wheel_1_1_unhide;
                source = HitLFWheel;
                minValue = 0; 
                maxValue = 1; 
                hidevalue = 0;
                UnHidevalue = 1;
            };
            class wheel_1_2_destruct_unhide: wheel_1_1_destruct_unhide
            {
                source = HitLBWheel;
                selection = wheel_1_2_unhide;
            };
            class wheel_1_3_destruct_unhide: wheel_1_1_destruct_unhide
            {
                source = HitLMWheel;
                selection = wheel_1_3_unhide;
            };
            class wheel_1_4_destruct_unhide: wheel_1_1_destruct_unhide
            {
                source = HitLF2Wheel;
                selection = wheel_1_4_unhide;
            };

            class wheel_2_1_destruct_unhide: wheel_1_1_destruct_unhide
            {
                source = HitRFWheel;
                selection = wheel_2_1_unhide;
            };
            class wheel_2_2_destruct_unhide: wheel_1_1_destruct_unhide
            {
                source = HitRBWheel;
                selection = wheel_2_2_unhide;
            };
            class wheel_2_3_destruct_unhide: wheel_1_1_destruct_unhide
            {
                source = HitRMWheel;
                selection = wheel_2_3_unhide;
            };
            class wheel_2_4_destruct_unhide: wheel_1_1_destruct_unhide
            {
                source = HitRF2Wheel;
                selection = wheel_2_4_unhide;
            };

            // Wheels Complete Destruct END

            #define DamageOffset 0.2

            // Wheels Damage START
            class wheel_1_1_Damage: wheel_1_1_destruct
            {
                type = translation;
                axis = Basic_Damper_Destruct_Axis;
                memory = true;
                selection = wheel_1_1_damper;
                source = HitLFWheel;
                minValue = 0;
                maxValue = 1;
                offset0 = 0;
                offset1 = DamageOffset;
            };
            class wheel_1_2_Damage: wheel_1_1_Damage
            {
                source = HitLBWheel;
                selection = wheel_1_2_damper;
            };
            class wheel_1_3_Damage: wheel_1_1_Damage
            {
                source = HitLMWheel;
                selection = wheel_1_3_damper;
            };
            class wheel_1_4_Damage: wheel_1_1_Damage
            {
                source = HitLF2Wheel;
                selection = wheel_1_4_damper;
            };

            class wheel_2_1_Damage: wheel_1_1_Damage
            {
                source = HitRFWheel;
                selection = wheel_2_1_damper;
            };
            class wheel_2_2_Damage: wheel_1_1_Damage
            {
                source = HitRBWheel;
                selection = wheel_2_2_damper;
            };
            class wheel_2_3_Damage: wheel_1_1_Damage
            {
                source = HitRMWheel;
                selection = wheel_2_3_damper;
            };
            class wheel_2_4_Damage: wheel_1_1_Damage
            {
                source = HitRF2Wheel;
                selection = wheel_2_4_damper;
            };


            class wheel_1_1_Damper_Damage_BackAnim: wheel_1_1_Damage
            {
                selection = wheel_1_1_damper;
                offset1 = -1.2*DamageOffset;
            };
            class wheel_1_2_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim
            {
                source = HitLBWheel;
                selection = wheel_1_2_damper;
            };
            class wheel_1_3_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim
            {
                source = HitLMWheel;
                selection = wheel_1_3_damper;
            };
            class wheel_1_4_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim
            {
                source = HitLF2Wheel;
                selection = wheel_1_4_damper;
            };

            class wheel_2_1_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim
            {
                source = HitRFWheel;
                selection = wheel_2_1_damper;
            };
            class wheel_2_2_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim
            {
                source = HitRBWheel;
                selection = wheel_2_2_damper;
            };
            class wheel_2_3_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim
            {
                source = HitRMWheel;
                selection = wheel_2_3_damper;
            };
            class wheel_2_4_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim
            {
                source = HitRF2Wheel;
                selection = wheel_2_4_damper;
            };

            // Wheels Damage END

            class Wheel_1_1
            {
                type = rotationX;
                source = wheel;
                selection = wheel_1_1;
                axis = wheel_1_1_axis;
                memory = true;
                sourceAddress = loop;
                minValue=0;
                maxValue=1;
                angle0=0;
                angle1 = rad -360;
            };
            class wheel_1_2: Wheel_1_1
            {
                selection = wheel_1_2;
                axis = wheel_1_2_axis;
            };
            class wheel_1_3: Wheel_1_1
            {
                selection = wheel_1_3;
                axis = wheel_1_3_axis;
            };
            class Wheel_1_4: Wheel_1_1
            {
                selection = wheel_1_4;
                axis = wheel_1_4_axis;
            };

            class wheel_2_1: Wheel_1_1
            {
                selection = wheel_2_1;
                axis = wheel_2_1_axis;
            };
            class Wheel_2_2: Wheel_1_1
            {
                selection = wheel_2_2;
                axis = wheel_2_2_axis;
            };
            class Wheel_2_3: Wheel_1_1
            {
                selection = wheel_2_3;
                axis = wheel_2_3_axis;
            };
            class Wheel_2_4: Wheel_1_1
            {
                selection = wheel_2_4;
                axis = wheel_2_4_axis;
            };

            class Wheel_1_1_Damper
            {
                type = translation;
                source = damper;
                selection = wheel_1_1_damper_land;
                axis = damper_axis;
                animPeriod = 1;
                minValue = 0;
                maxValue = 1;
                offset0 = 0.5;
                offset1 = -0.5;
                memory = true;
            };
            class wheel_1_2_Damper: Wheel_1_1_Damper
            {
                selection = wheel_1_2_damper_land;
            };
            class Wheel_1_3_Damper: Wheel_1_1_Damper
            {
                selection = wheel_1_3_damper_land;
            };
            class Wheel_1_4_Damper: Wheel_1_1_Damper
            {
                selection = wheel_1_4_damper_land;
            };

            class wheel_2_1_Damper: Wheel_1_1_Damper
            {
                selection = wheel_2_1_damper_land;
            };
            class Wheel_2_2_Damper: Wheel_1_1_Damper
            {
                selection = wheel_2_2_damper_land;
            };
            class Wheel_2_3_Damper: Wheel_1_1_Damper
            {
                selection = wheel_2_3_damper_land;
            };
            class Wheel_2_4_Damper: Wheel_1_1_Damper
            {
                selection = wheel_2_4_damper_land;
            };

            // Wheels END
            // destruct END        
        };
    };
    class APC_Wheeled_04_base_F: Car
    {
		htMin = 60;		// Minimum half-cooling time (in seconds)
		htMax = 1800;	// Maximum half-cooling time (in seconds)
		afMax = 200;	// Maximum temperature in case the model is alive (in celsius)
		mfMax = 100;	// Maximum temperature when the model is moving (in celsius)
		mFact = 1;		// Metabolism factor - number from interval <0, 1> (0 - metabolism has no influence, 1 - metabolism has full influence (no other temperature source will be considered)).
		tBody = 250;	// Metabolism temperature of the model (in celsius)
		skeletonName = APC_Wheeled_04_base_F_skeleton;
		sectionsInherit = Car;
        sections[] =
        {
            /* Muzzle Flashes */
            zasleh,
            zasleh2,

            /* Lights */
            Light_R,
            Light_L,

            /* Textures */
            Camo1,
            Camo2,
            Camo3,
            CamoNet,
            CamoSlat,

            /* Damage */
            vez,
            vezVelitele,
            zbran,
            zbytek,

            /* Wheels */
			wheel_1_1_hide,
            wheel_1_2_hide,
			wheel_1_3_hide,
            wheel_1_4_hide,

			wheel_2_1_hide,
            wheel_2_2_hide,
			wheel_2_3_hide,
            wheel_2_4_hide
        };
        class Animations: Animations
        {
            // Dampers Destruct START
            #undef DamageOffset
            #define DamageOffset 0.22

            class wheel_1_1_Damage: wheel_1_1_Damage
            {
                offset1 = DamageOffset;
            };
            class wheel_1_2_Damage: wheel_1_2_Damage
            {
                offset1 = DamageOffset;
            };
            class wheel_1_3_Damage: wheel_1_3_Damage
            {
                offset1 = DamageOffset;
            };
            class wheel_1_4_Damage: wheel_1_4_Damage
            {
                offset1 = DamageOffset;
            };

            class wheel_2_1_Damage: wheel_2_1_Damage
            {
                offset1 = DamageOffset;
            };
            class wheel_2_2_Damage: wheel_2_2_Damage
            {
                offset1 = DamageOffset;
            };
            class wheel_2_3_Damage: wheel_2_3_Damage
            {
                offset1 = DamageOffset;
            };
            class wheel_2_4_Damage: wheel_2_4_Damage
            {
                offset1 = DamageOffset;
            };
            // Dampers Destruct END

            // animace damper smerem nahoru START
            class wheel_1_1_Damper_Damage_BackAnim: wheel_1_1_Damper_Damage_BackAnim
            {
                offset1 = -1.2*DamageOffset;
            };
            class wheel_1_2_Damper_Damage_BackAnim: wheel_1_2_Damper_Damage_BackAnim
            {
                offset1 = -1.2*DamageOffset;
            };
            class wheel_1_3_Damper_Damage_BackAnim: wheel_1_3_Damper_Damage_BackAnim
            {
                offset1 = -1.2*DamageOffset;
            };
            class wheel_1_4_Damper_Damage_BackAnim: wheel_1_4_Damper_Damage_BackAnim
            {
                offset1 = -1.2*DamageOffset;
            };

            class wheel_2_1_Damper_Damage_BackAnim: wheel_2_1_Damper_Damage_BackAnim
            {
                offset1 = -1.2*DamageOffset;
            };
            class wheel_2_2_Damper_Damage_BackAnim: wheel_2_2_Damper_Damage_BackAnim
            {
                offset1 = -1.2*DamageOffset;
            };
            class wheel_2_3_Damper_Damage_BackAnim: wheel_2_3_Damper_Damage_BackAnim
            {
                offset1 = -1.2*DamageOffset;
            };
            class wheel_2_4_Damper_Damage_BackAnim: wheel_2_4_Damper_Damage_BackAnim
            {
                offset1 = -1.2*DamageOffset;
            };
            // animace damper smerem nahoru END

            class Steering_1_1
            {
                type = rotationY;
                source = drivingWheel;
                selection = wheel_1_1_steering;
                axis = wheel_1_1_steering_axis;
                memory = true;
                minValue = (rad -90);
                maxValue = (rad 90);
                angle0 = (rad 50);
                angle1 = (rad -50);
            };
            class Steering_2_1: Steering_1_1
            {
                selection = wheel_2_1_steering;
                axis = wheel_2_1_steering_axis;
            };   
            class Steering_1_2: Steering_1_1
            {
                selection = wheel_1_2_steering;
                axis = wheel_1_2_steering_axis;
                angle0 = (rad 25);
                angle1 = (rad -25);
            };
            class Steering_2_2: Steering_1_1
            {
                selection = wheel_2_2_steering;
                axis = wheel_2_2_steering_axis;
                angle0 = (rad 25);
                angle1 = (rad -25);
            };

			class HatchDriver
			{
				type = rotation;
				source = hatchDriver;
				selection = hatch_driver;
				axis = hatch_driver_axis;
                minValue = 0;
                maxValue = 1;
				angle0 = (rad 0);
				angle1 = (rad 100);
			};
			class HatchCommander: HatchDriver
			{
				source = hatchCommander;
				selection = hatch_commander;
				axis = hatch_commander_axis;
				angle0 = (rad 0);
				angle1 = (rad 100);
			};

			// TURRETS
            class MainTurret
            {
                type = rotationY;
                source = mainTurret;
                selection = OtocVez;
                axis = OsaVeze;
                animPeriod = 0;
                minValue = (rad -360);
                maxValue = (rad 360);
                angle0 = (rad -360);
                angle1 = (rad 360);
            };
            class MainGun: MainTurret
            {
                type = rotationX;
                source = mainGun;
                selection = OtocHlaven;
                axis = OsaHlavne;
            };
            class ObsTurret: MainTurret
            {
                source = obsTurret;
                selection = Commander_Turret;
                axis = Commander_Turret_axis;
            };
			class ObsGun: MainGun
            {
                source = obsGun;
                selection = Commander_Gun;
                axis = Commander_Gun_axis;
            };
			class damageVez: damageHide
			{
				selection = OtocVez;
			};
			class damageHlaven: damageHide
			{
				selection = damageHlaven;
			};

            class daylights
            {
				type = hide;
				source = rpm;
				selection = daylights;
				minValue = -0.8;
				maxValue = 0.2;
				hideValue = 0.2;
				unHideValue = 1;
			};
            class reverse_light
            {
                type = Hide;
                selection = reverse_light;
                sourceAddress = clamp;
                source = Gear;
                minValue = -1;
                maxValue = 0;
                hideValue = 0.2;
            };
			class HideTurret
            {
				type = hide;
				selection = OtocVez;
				source = HideTurret;
				minValue = 0;
				maxValue = 1;
				hideValue = 1;
			};

            // INDICATORS
            class DrivingWheel
            {
				type = rotation;
                source = drivingWheel;
                selection = drivewheel;
                axis = drivewheel_axis;
                minValue = -1;
                maxValue = 1;
                angle0 = (rad 45);
                angle1 = (rad -45);
            };
            class IndicatorSpeed
            {
				type = rotation;
                source = speed;
                selection = mph;
                axis = mph_axis;
                memory = true;
                maxValue = 90;
                angle0 = (rad 0);
                angle1 = (rad 270);
            };
        };
    };
    class APC_Wheeled_04_cannon_F: APC_Wheeled_04_base_F
    {
		sectionsInherit = APC_Wheeled_04_base_F;
        sections[] =
        {
            /* Muzzle Flashes */
            zasleh,
            zasleh2,

            /* Lights */
            Light_R,
            Light_L,

            /* Textures */
            Camo1,
            Camo2,
            Camo3,
            CamoNet,
            CamoSlat,

            /* Damage */
            vez,
            vezVelitele,
            zbran,
            zbytek,

            /* Wheels */
			wheel_1_1_hide,
            wheel_1_2_hide,
			wheel_1_3_hide,
            wheel_1_4_hide,

			wheel_2_1_hide,
            wheel_2_2_hide,
			wheel_2_3_hide,
            wheel_2_4_hide
        };
		skeletonName = APC_Wheeled_04_cannon_F_skeleton;
        class Animations: Animations
        {
            class MainGunLauncher: MainGun
            {
                source = mainGun;
                selection = launcher;
                axis = launcher_axis;
            };
            class Recoil
            {
                type = translation;
                source = reload_cannon;
                selection = recoilHlaven;
                axis = recoilHlaven_axis;
                minValue = 0.5;
                maxValue = 1;
                offset0 = 0;
                offset1 = 0.1;
            };

            class hideMissile_1
            {
                type = hide;
                source = Missiles_revolving;
                selection = Missile_1;
                sourceAddress = mirror;
                minValue = -1;
                maxValue = 0;
                hideValue = 0.01;
                unHideValue = -1;
            };
            class hideMissile_2: hideMissile_1
            {
                selection = Missile_4;
                hideValue = 0.3;
                unHideValue = -1;
            };
            class hideMissile_3: hideMissile_2
            {
                selection = Missile_2;
                hideValue = 0.55;
                unHideValue = -1;
            };
            class hideMissile_4: hideMissile_3
            {
                selection = Missile_3;
                hideValue = 0.8;
                unHideValue = -1;
            };
            class reloadMissile_1
            {
                type = hide;
                source = Missiles_reloadMagazine;
                selection = Missile_1;
                minValue = 0;
                maxValue = 1;
                hideValue = 0.01;
                unHideValue = -1;
            };
            class reloadMissile_2: reloadMissile_1
            {
                selection = Missile_2;
                hideValue = 0.3;
                unHideValue = -1;
            };
            class reloadMissile_3: reloadMissile_2
            {
                selection = Missile_3;
                hideValue = 0.55;
                unHideValue = -1;
            };
            class reloadMissile_4: reloadMissile_3
            {
                selection = Missile_4;
                hideValue = 0.8;
                unHideValue = -1;
            };
            class Missile_move_1
            {
                type = translation;
                source = Missiles_revolving;
                selection = Missile_move;
                axis = launcher_axis;
                minValue = 0;
                maxValue = 0.1;
                offset0 = 0;
                offset1 = 0.07;
            };
            class Missile_move_2: Missile_move_1
            {
                minValue = 0.3;
                maxValue = 0.4;
                offset1 = 0.87;
            };
            class Missile_move_3: Missile_move_2
            {
                minValue = 0.6;
                maxValue = 0.7;
                offset1 = -0.93;
            };
            class Missile_move_4: Missile_move_3
            {
                minValue = 0.8;
                maxValue = 0.9;
                offset1 = 0.99;
            };

            /*
            class zasleh_ROT
            {
                selection = zasleh;
                axis = "usti hlavne";
                type = rotationZ;
                source = muzzle_rot;
                sourceAddress = loop;
                minValue = 0;
                maxValue = 5;
				angle0 = (rad -180);
				angle1 = (rad 180);
            };
            */
			class zasleh2_ROT
			{
				selection = zasleh2;
				axis = "usti hlavne3";
                type = rotationZ;
				source = time;  // Much better source for medium and high ROF weapons.
                minValue = 0;
				maxValue = 0.24;
				sourceAddress = mirror;
				angle0 = (rad -180);
				angle1 = (rad 180);
			};
            class zasleh_HIDE
            {
                type = hide;
                source = muzzle_hide;
                selection = zasleh;
                minValue = 0;
                maxValue = 1;
                hideValue = 0;
                unhideValue = 0.85;
            };
        };
    };
    class APC_Wheeled_04_cannon_v2_F: APC_Wheeled_04_base_F
    {
		sectionsInherit = APC_Wheeled_04_base_F;
        sections[] = {};
		skeletonName = APC_Wheeled_04_cannon_v2_F_skeleton;
        class Animations: Animations
        {
            class Recoil
            {
                type = translation;
                source = recoil_source;
                selection = recoilHlaven;
                axis = recoilHlaven_axis;
                minValue = 0.5;
                maxValue = 1;
                offset0 = 0;
                offset1 = -1;
            };

            class cannon_muzzle_flash
            {
                type = hide;
                source = muzzle_hide_cannon;
                selection = muzzleflash_cannon;
                minValue = 0;
                maxValue = 1;
                hideValue = 0;
                unhideValue = 0.992;
            };
            class zaslehROT_cannon
            {
                selection = muzzleflash_cannon;
                axis = "usti hlavne";
                type = rotationZ;
                source = muzzle_rot_cannon;
                sourceAddress = loop;
                minValue = 0;
                maxValue = 5;
				angle0 = (rad -180);
				angle1 = (rad 180);
            };
			class zaslehROT: zaslehROT_cannon
			{
				selection = zasleh;
				axis = "usti hlavne3";
				source = time;  // Much better source for medium and high ROF weapons.
				maxValue = 0.24;
				sourceAddress = mirror;
			};
        };
    };
};